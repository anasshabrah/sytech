--- C:\Users\hanos\sytech\declarations.d.ts ---
// declarations.d.ts
declare module 'react-outside-click-handler' {
  import * as React from 'react';

  interface OutsideClickHandlerProps {
    onOutsideClick: (event: MouseEvent | TouchEvent) => void;
    disabled?: boolean;
    children: React.ReactNode;
  }

  export default class OutsideClickHandler extends React.Component<OutsideClickHandlerProps> {}
}

declare module 'react-modal-video' {
  import * as React from 'react';

  interface ReactModalVideoProps {
    channel?: 'youtube' | 'vimeo' | 'custom';
    isOpen: boolean;
    videoId: string;
    autoplay?: boolean;
    onClose: () => void;
    // Add any additional props you use
  }

  export default class ModalVideo extends React.Component<ReactModalVideoProps> {}
}


--- C:\Users\hanos\sytech\next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


--- C:\Users\hanos\sytech\next.config.mjs ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    unoptimized: true,
  },
  output: "export",
  trailingSlash: true,
};

export default nextConfig;


--- C:\Users\hanos\sytech\package.json ---
{
  "name": "SyTech",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "@emailjs/browser": "^4.4.1",
    "@gsap/react": "^2.1.1",
    "@popperjs/core": "^2.11.8",
    "apexcharts": "^4.3.0",
    "bootstrap": "^5.3.3",
    "core-js": "^3.40.0",
    "glob": "^11.0.0",
    "gsap": "^3.12.5",
    "lru-cache": "^11.0.2",
    "next": "15.1.4",
    "phosphor-icons": "^1.4.2",
    "postmark": "^4.0.5",
    "react": "^19.0.0",
    "react-animate-height": "^3.2.3",
    "react-apexcharts": "^1.7.0",
    "react-dom": "^19.0.0",
    "react-intersection-observer": "^9.14.1",
    "react-modal-video": "^2.0.2",
    "sharp": "^0.33.5",
    "shuffle-letters": "^1.1.0",
    "split-type": "^0.3.4",
    "swiper": "^11.2.0",
    "typewriter-effect": "^2.21.0"
  },
  "devDependencies": {
    "@fullhuman/postcss-purgecss": "^7.0.2",
    "@types/bootstrap": "^5.2.10",
    "@types/node": "22.10.5",
    "@types/react": "^19.0.4",
    "@types/react-dom": "^19.0.2",
    "@types/react-modal-video": "^1.2.3",
    "cssnano": "^7.0.6",
    "postcss": "^8.4.49",
    "postcss-import": "^16.1.0",
    "postcss-preset-env": "^10.1.3",
    "sass": "^1.83.1",
    "typescript": "5.7.3"
  }
}


--- C:\Users\hanos\sytech\postcss.config.js ---
// postcss.config.js

module.exports = {
  plugins: {
    'postcss-import': {},
    'postcss-preset-env': {
      stage: 3,
      features: {
        'nesting-rules': true,
      },
    },
    ...(process.env.NODE_ENV === 'production'
      ? {
          '@fullhuman/postcss-purgecss': {
            content: [
              './app/**/*.{js,jsx,ts,tsx}',
              './components/**/*.{js,jsx,ts,tsx}',
              './pages/**/*.{js,jsx,ts,tsx}',
            ],
            defaultExtractor: (content) => content.match(/[\w-/:]+(?<!:)/g) || [],
            safelist: {
              standard: [
                'active',
                'opened',
                /^nav-/,
                /^btn-/,
                /^text-/,
                /^bg-/,
                /^swiper/,
              ],
            },
          },
          'cssnano': {
            preset: 'default',
          },
        }
      : {}),
  },
};


--- C:\Users\hanos\sytech\shuffle.d.ts ---
declare module "shuffle-letters";


--- C:\Users\hanos\sytech\tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


--- C:\Users\hanos\sytech\app\layout.tsx ---
import type { Metadata } from "next";
import Bootstrap from "@/components/Bootstrap";
import GSAPAnimations from "@/components/GSAPAnimations";
import "@/public/scss/styles.scss";

export const metadata: Metadata = {
  title: "سيرياتك - مسرعة أعمال سورية مساهمة خاصة",
  description:
    "نجمع أصحاب الطموح والمشاريع الناشئة مع المستثمرين المساهمين في سيرياتك المساهمة الخاصة",
};

type LayoutType = {
  children: React.ReactNode;
};

export default function RootLayout({ children }: LayoutType) {
  return (
    <html lang="ar" dir="rtl">
      <head>
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css2?family=Readex+Pro:wght@400;500;600;700&display=swap"
        />
      </head>
      <body className="font-readex" suppressHydrationWarning>
        <Bootstrap>
          <GSAPAnimations />
          {children}
        </Bootstrap>
      </body>
    </html>
  );
}


--- C:\Users\hanos\sytech\app\page.tsx ---
"use client";
import Header from "@/components/Header";
import Navigation from "@/components/Navigation";
import Hero from "@/components/Hero";
import AboutMe from "@/components/AboutMe";
import Services from "@/components/Services";
import Attainments from "@/components/Attainments";
import Experience from "@/components/Experience";
import { useEffect, useState } from "react";

export default function Home() {
  const [navOpen, setNavOpen] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    setLoading(false);
  }, []);

  if (loading) {
    return (
      <div className="loader-container w-100 d-flex align-items-center justify-content-center">
        <div className="loader"></div>
      </div>
    );
  }

  return (
    <>
      <Header navOpen={navOpen} setNavOpen={setNavOpen} />
      <Navigation setNavOpen={setNavOpen} navOpen={navOpen} />
      <svg className="bg-gradiant" preserveAspectRatio="xMidYMid slice" viewBox="10 10 80 80">
        <path
          fill="#9b5de5"
          className="out-top"
          d="M37-5C25.1-14.7,5.7-19.1-9.2-10-28.5,1.8-32.7,31.1-19.8,49c15.5,21.5,52.6,22,67.2,2.3C59.4,35,53.7,8.5,37-5Z"
        />
        <path
          fill="#f15bb5"
          className="in-top"
          d="M20.6,4.1C11.6,1.5-1.9,2.5-8,11.2-16.3,23.1-8.2,45.6,7.4,50S42.1,38.9,41,24.5C40.2,14.1,29.4,6.6,20.6,4.1Z"
        />
        <path
          fill="#00bbf9"
          className="out-bottom"
          d="M105.9,48.6c-12.4-8.2-29.3-4.8-39.4.8-23.4,12.8-37.7,51.9-19.1,74.1s63.9,15.3,76-5.6c7.6-13.3,1.8-31.1-2.3-43.8C117.6,63.3,114.7,54.3,105.9,48.6Z"
        />
        <path
          fill="#00f5d4"
          className="in-bottom"
          d="M102,67.1c-9.6-6.1-22-3.1-29.5,2-15.4,10.7-19.6,37.5-7.6,47.8s35.9,3.9,44.5-12.5C115.5,92.6,113.9,74.6,102,67.1Z"
        />
      </svg>
      <main className="container-fluid">
        <div className="row gx-xxl-6">
          <div className="col col-xl-9" data-bs-spy="scroll" data-bs-target="#navigation">
            <Hero />
            <AboutMe />
            <Services />
            <Attainments />
            <Experience />
          </div>
        </div>
      </main>
    </>
  );
}


--- C:\Users\hanos\sytech\app\types.ts ---
// app/types.ts
import { StaticImageData } from 'next/image';

export interface TableOfContentsItem {
  id: string;
  title: string;
}

export interface SubmitInvestorResponse {
  success: boolean;
  message?: string;
}


--- C:\Users\hanos\sytech\app\api\submit-investor\route.ts ---
// app/api/submit-investor/route.ts

import { NextRequest, NextResponse } from "next/server";
import { ServerClient } from "postmark";
import { SubmitInvestorResponse } from "@/app/types";

// Define the runtime environment if necessary
export const runtime = "nodejs";

// Interface for the expected form fields
interface InvestorFormFields {
  investorName: string;
  investorEmail: string;
  investorPhone: string;
  investmentAmount: string;
}

// Sanitization function to prevent XSS attacks
const sanitize = (input: string): string => {
  return input
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
};

// Main POST handler
export async function POST(
  req: NextRequest
): Promise<NextResponse<SubmitInvestorResponse>> {
  console.log("Received POST request to /api/submit-investor");

  try {
    // Extract and log Content-Type header
    const contentType = req.headers.get("Content-Type") || "";
    console.log(`Content-Type header: ${contentType}`);

    // Validate Content-Type
    if (!contentType.includes("application/json")) {
      console.warn("Invalid Content-Type received");
      return NextResponse.json(
        { success: false, message: "Invalid Content-Type. Expected application/json." },
        { status: 400 }
      );
    }

    // Attempt to parse JSON body
    let body: any;
    try {
      body = await req.json();
      console.log("Request body parsed successfully");
    } catch (parseError) {
      console.error("Error parsing JSON body:", parseError);
      return NextResponse.json(
        { success: false, message: "Invalid JSON format." },
        { status: 400 }
      );
    }

    console.log("Original request body:", body);

    // Sanitize and assign form fields
    const investorFields: InvestorFormFields = {
      investorName: sanitize(body.investorName || ""),
      investorEmail: sanitize(body.investorEmail || ""),
      investorPhone: sanitize(body.investorPhone || ""),
      investmentAmount: sanitize(body.investmentAmount || ""),
    };

    console.log("Sanitized investor fields:", investorFields);

    const { investorName, investorEmail, investorPhone, investmentAmount } = investorFields;

    // Validate required fields
    if (!investorName || !investorEmail || !investorPhone || !investmentAmount) {
      console.warn("Validation failed: Missing required fields");
      return NextResponse.json(
        { success: false, message: "يرجى ملء جميع الحقول المطلوبة." },
        { status: 400 }
      );
    }
    console.log("All required fields are present");

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(investorEmail)) {
      console.warn("Validation failed: Invalid email format");
      return NextResponse.json(
        { success: false, message: "البريد الإلكتروني غير صالح." },
        { status: 400 }
      );
    }
    console.log("Email format is valid");

    // Validate phone number format (7-14 digits, optional +)
    const phoneRegex = /^\+?\d{7,14}$/;
    if (!phoneRegex.test(investorPhone)) {
      console.warn("Validation failed: Invalid phone number format");
      return NextResponse.json(
        {
          success: false,
          message: "رقم الهاتف غير صالح. يجب أن يتألف من 7-14 رقم، مع السماح بعلامة + اختيارياً.",
        },
        { status: 400 }
      );
    }
    console.log("Phone number format is valid");

    // Validate investment amount (numeric and minimum value)
    const investmentNum = parseFloat(investmentAmount);
    if (isNaN(investmentNum) || investmentNum < 100) {
      console.warn("Validation failed: Invalid investment amount");
      return NextResponse.json(
        { success: false, message: "مبلغ الاستثمار غير صالح (الحد الأدنى 100 دولار)." },
        { status: 400 }
      );
    }
    console.log(`Investment amount is valid: ${investmentNum}`);

    // Retrieve Postmark server token from environment variables
    const postmarkToken = process.env.POSTMARK_SERVER_TOKEN;
    if (!postmarkToken) {
      console.error("Postmark server token is missing in environment variables");
      return NextResponse.json(
        { success: false, message: "Internal Server Error." },
        { status: 500 }
      );
    }
    console.log("Postmark server token retrieved successfully");

    // Conditionally log Postmark token (only in non-production)
    if (process.env.NODE_ENV !== "production") {
      console.log("Postmark Token:", postmarkToken);
    }

    // Initialize Postmark client
    const client = new ServerClient(postmarkToken);
    console.log("Postmark client initialized");

    // Prepare email content with UTF-8 support
    const emailContent = {
      From: "info@syriatech.co", // Replace with your verified Postmark sender
      To: "habrahllc@gmail.com", // Replace with your recipient email
      Subject: "تقديم مستثمر جديد",
      HtmlBody: `
        <p><strong>اسم المستثمر:</strong> ${investorName}</p>
        <p><strong>البريد الإلكتروني:</strong> ${investorEmail}</p>
        <p><strong>رقم الهاتف:</strong> ${investorPhone}</p>
        <p><strong>مبلغ الاستثمار المتوقع:</strong> ${investmentAmount}</p>
      `,
      TextBody: `
        اسم المستثمر: ${investorName}
        البريد الإلكتروني: ${investorEmail}
        رقم الهاتف: ${investorPhone}
        مبلغ الاستثمار المتوقع: ${investmentAmount}
      `,
      MessageStream: "outbound",
    };

    console.log("Email content prepared:", {
      From: emailContent.From,
      To: emailContent.To,
      Subject: emailContent.Subject,
      // Omitting HtmlBody and TextBody for security
    });

    // Send email via Postmark
    console.log("Sending email via Postmark");
    const sendResult = await client.sendEmail(emailContent);
    console.log("Email sent result:", sendResult);

    if (sendResult.Message === "OK") {
      console.log("Email sent successfully");
      return NextResponse.json({ success: true }, { status: 200 });
    } else {
      console.error("Failed to send email via Postmark:", sendResult.Message);
      return NextResponse.json(
        { success: false, message: "فشل في إرسال البريد الإلكتروني." },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("An unexpected error occurred:", error);
    return NextResponse.json(
      { success: false, message: "حدث خطأ أثناء معالجة الطلب." },
      { status: 500 }
    );
  }
}


--- C:\Users\hanos\sytech\app\api\submit-project\route.ts ---
// app/api/submit-project/route.ts

import { NextRequest, NextResponse } from "next/server";
import { ServerClient } from "postmark";

interface SubmitProjectResponse {
  success: boolean;
  message?: string;
}

export async function POST(
  req: NextRequest
): Promise<NextResponse<SubmitProjectResponse>> {
  try {
    const formData = await req.formData();

    const fullName = formData.get("fullName")?.toString().trim() || "";
    const email = formData.get("email")?.toString().trim() || "";
    const phone = formData.get("phone")?.toString().trim() || "";
    const linkedin = formData.get("linkedin")?.toString().trim() || "";
    const website = formData.get("website")?.toString().trim() || "";
    const pitchDeck = formData.get("pitchDeck") as File | null;

    // Basic required fields check
    if (!fullName || !email || !phone || !linkedin || !website || !pitchDeck) {
      return NextResponse.json(
        { success: false, message: "يرجى ملء جميع الحقول المطلوبة." },
        { status: 400 }
      );
    }

    // Email format check
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { success: false, message: "البريد الإلكتروني غير صالح." },
        { status: 400 }
      );
    }

    // Phone format check (7-14 digits, optional +)
    const phoneRegex = /^\+?\d{7,14}$/;
    if (!phoneRegex.test(phone)) {
      return NextResponse.json(
        {
          success: false,
          message:
            "رقم الهاتف غير صالح. يجب أن يتألف من 7-14 رقم، مع السماح بعلامة + اختيارياً.",
        },
        { status: 400 }
      );
    }

    // Allowed file types and size checks
    if (pitchDeck.type !== "application/pdf") {
      return NextResponse.json(
        {
          success: false,
          message: "نوع الملف غير مسموح به. يرجى تحميل ملف PDF.",
        },
        { status: 400 }
      );
    }

    const maxFileSize = 10 * 1024 * 1024; // 10MB
    if (pitchDeck.size > maxFileSize) {
      return NextResponse.json(
        {
          success: false,
          message: "حجم الملف كبير جداً. الحد الأقصى هو 10MB.",
        },
        { status: 400 }
      );
    }

    // Convert file to Base64 so we can attach it to an email
    const arrayBuffer = await pitchDeck.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);
    const base64File = buffer.toString("base64");

    const postmarkToken = process.env.POSTMARK_SERVER_TOKEN;
    if (!postmarkToken) {
      console.error(
        "POSTMARK_SERVER_TOKEN is not defined in environment variables."
      );
      return NextResponse.json(
        { success: false, message: "Internal Server Error." },
        { status: 500 }
      );
    }

    const client = new ServerClient(postmarkToken);

    const sanitize = (input: string): string => {
      return input
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    };

    const sendResult = await client.sendEmail({
      From: "info@syriatech.co",
      To: "habrahllc@gmail.com",
      Subject: "تقديم عرض مشروع جديد",
      HtmlBody: `
        <p><strong>الاسم الكامل:</strong> ${sanitize(fullName)}</p>
        <p><strong>البريد الإلكتروني:</strong> ${sanitize(email)}</p>
        <p><strong>رقم الهاتف:</strong> ${sanitize(phone)}</p>
        <p><strong>ملف لينكدإن:</strong> <a href="${sanitize(
          linkedin
        )}">${sanitize(linkedin)}</a></p>
        <p><strong>الموقع الإلكتروني أو موقع الشركة:</strong> <a href="${sanitize(
          website
        )}">${sanitize(website)}</a></p>
      `,
      TextBody: `
        الاسم الكامل: ${sanitize(fullName)}
        البريد الإلكتروني: ${sanitize(email)}
        رقم الهاتف: ${sanitize(phone)}
        ملف لينكدإن: ${sanitize(linkedin)}
        الموقع الإلكتروني أو موقع الشركة: ${sanitize(website)}
      `,
      Attachments: [
        {
          Name: pitchDeck.name || "pitch-deck.pdf",
          Content: base64File,
          ContentType: pitchDeck.type || "application/pdf",
          ContentID: "pitch-deck",
        },
      ],
    });

    if (sendResult.Message === "OK") {
      return NextResponse.json({ success: true });
    } else {
      console.error("Postmark send email failed:", sendResult.Message);
      return NextResponse.json(
        { success: false, message: "فشل في إرسال البريد الإلكتروني." },
        { status: 500 }
      );
    }
  } catch (error: any) {
    console.error("Error in submit-project API:", error);
    return NextResponse.json(
      { success: false, message: "حدث خطأ أثناء معالجة الطلب." },
      { status: 500 }
    );
  }
}


--- C:\Users\hanos\sytech\components\AboutMe.tsx ---
import Link from "next/link";
import React from "react";
import SectionTitle from "./SectionTitle";
import SectionOverlayText from "./SectionOverlayText";
const AboutMe = () => {
  return (
    <section id="about_me" className="about section">
      <SectionTitle subtitle="كلمتين نظاف أحسن من جريدة وسخة" title="تعرف علينا" />
      <div className="row mb-4 mb-lg-5 align-items-center">
        <div className="col-lg-7 col-xl-8 about-desc">
          <h2>أنا أنس هبره وهذه سيرياتك</h2>
          <p className="desc">
            سيرياتك شركة خاصة مساهمة بتدعم رواد الأعمال والشركات الناشئة لتطوير مشاريعهم وتحقيق النجاح. بتشتغل كمسرّعة أعمال، يعني بتجمع المستثمرين مع رواد الأعمال وبتقدم لهم استشارات استراتيجية، وبتوفر لهم الموارد اللازمة، وبتساعدهم يبنوا شبكة علاقات قوية. الهدف الأساسي هو تمكين الشباب السوري الطموح لتحويل أفكارهم إلى مشاريع ناجحة تساهم بنهضة الاقتصاد المحلي وتقلل من اعتماد السوق على الشركات الأجنبية، وتسد الفراغ الموجود بعدة قطاعات، في الجانب التقني.
          </p>
          <div className="row about-contact">
            <div className="col-sm-4 about-contact-item">
              <p>العنوان</p>
              <span>حماه، سوريا</span>
            </div>
            <div className="col-sm-4 about-contact-item">
              <p>رئيس مجلس الإدارة</p>
              <span>أنس هبره</span>
            </div>
          </div>
        </div>
        <div className="col-lg-5 col-xl-4">
          <div className="experience-card">
            <div className="card-inner"></div>
            <div>
              <div className="numbers">
                <span className="number-outline-one">10</span>
                <span className="number-outline-two">10</span>
                <span className="number-main">10</span>
              </div>
              <p>سنوات الخبرة</p>
            </div>
          </div>
        </div>
      </div>
      <div className="col-12">
        <Link href="#services" className="d-flex gap-4 align-items-center next-chapter">
          <span className="page">3/6</span>
          <span className="next">القسم التالي</span>
          <span className="icon">
            <i className="ph ph-arrow-elbow-right-down"></i>
          </span>
        </Link>
      </div>
    </section>
  );
};

export default AboutMe;


--- C:\Users\hanos\sytech\components\Attainments.tsx ---
// components/Attainments.tsx
"use client";
import React, { useState, ChangeEvent, FormEvent, useRef, useEffect } from "react";
import Link from "next/link";
import SectionTitle from "./SectionTitle";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

interface FormData {
  investorName: string;
  investorEmail: string;
  investorPhone: string;
  investmentAmount: string;
}

interface SubmitInvestorResponse {
  success: boolean;
  message?: string;
}

interface Status {
  loading: boolean;
  success: string | null;
  error: string | null;
}

const Attainments: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({
    investorName: "",
    investorEmail: "",
    investorPhone: "",
    investmentAmount: "",
  });

  const [status, setStatus] = useState<Status>({
    loading: false,
    success: null,
    error: null,
  });

  const formRef = useRef<HTMLFormElement>(null);

  useEffect(() => {
    const formGroups = gsap.utils.toArray<HTMLElement>(".attainments-form-group");
    gsap.fromTo(
      formGroups,
      { opacity: 0, y: 50 },
      {
        opacity: 1,
        y: 0,
        stagger: 0.15,
        duration: 0.8,
        ease: "power2.out",
        scrollTrigger: {
          trigger: ".attainments",
          start: "top 80%",
        },
      }
    );
    gsap.fromTo(
      ".submit-button",
      { opacity: 0, y: 30 },
      {
        opacity: 1,
        y: 0,
        duration: 1.0,
        ease: "power2.out",
        scrollTrigger: {
          trigger: ".attainments",
          start: "top 80%",
        },
      }
    );
  }, []);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setStatus({ loading: true, success: null, error: null });

    try {
      const response = await fetch("/api/submit-investor", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const contentType = response.headers.get("Content-Type") || "";
      if (!contentType.includes("application/json")) {
        const text = await response.text();
        console.error(`Invalid Content-Type: ${contentType}\nResponse body: ${text}`);
        throw new Error(`Invalid Content-Type: ${contentType}`);
      }

      const data: SubmitInvestorResponse = await response.json();
      console.log("API Response:", data);
      if (response.ok && data.success) {
        setStatus({ loading: false, success: "تم إرسال بياناتك بنجاح!", error: null });
        setFormData({ investorName: "", investorEmail: "", investorPhone: "", investmentAmount: "" });
        formRef.current?.reset();
      } else {
        setStatus({
          loading: false,
          success: null,
          error: data.message || "حدث خطأ غير متوقع.",
        });
      }
    } catch (err: any) {
      console.error("Fetch Error:", err);
      setStatus({
        loading: false,
        success: null,
        error: err.message || "حدث خطأ أثناء الإرسال. يرجى المحاولة لاحقًا.",
      });
    }
  };

  return (
    <section id="attainments" className="attainments section position-relative pb-5 mb-5" dir="rtl">
      <SectionTitle subtitle="بدك تصير مستثمر مساهم؟" title="عبيلنا النموذج" />
      <form ref={formRef} onSubmit={handleSubmit} className="contact-form needs-validation" noValidate>
        <div className="row g-4 g-xl-5">
          {/* Investor Name */}
          <div className="col-sm-6 attainments-form-group">
            <div className="form-floating">
              <input
                type="text"
                className={`form-control ${status.error && !formData.investorName ? "is-invalid" : ""}`}
                id="investorName"
                name="investorName"
                value={formData.investorName}
                onChange={handleChange}
                placeholder="الاسم الكامل"
                required
              />
              <label htmlFor="investorName">الاسم الكامل</label>
              {status.error && !formData.investorName && (
                <div className="invalid-feedback">الاسم الكامل مطلوب.</div>
              )}
            </div>
          </div>

          {/* Investor Email */}
          <div className="col-sm-6 attainments-form-group">
            <div className="form-floating">
              <input
                type="email"
                className={`form-control ${status.error && !formData.investorEmail ? "is-invalid" : ""}`}
                id="investorEmail"
                name="investorEmail"
                value={formData.investorEmail}
                onChange={handleChange}
                placeholder="البريد الإلكتروني"
                required
              />
              <label htmlFor="investorEmail">البريد الإلكتروني</label>
              {status.error && !formData.investorEmail && (
                <div className="invalid-feedback">البريد الإلكتروني مطلوب.</div>
              )}
            </div>
          </div>

          {/* Investor Phone */}
          <div className="col-sm-6 attainments-form-group">
            <div className="form-floating">
              <input
                type="tel"
                className={`form-control ${status.error && !formData.investorPhone ? "is-invalid" : ""}`}
                id="investorPhone"
                name="investorPhone"
                value={formData.investorPhone}
                onChange={handleChange}
                placeholder="رقم الجوال"
                required
              />
              <label htmlFor="investorPhone">رقم الجوال</label>
              {status.error && !formData.investorPhone && (
                <div className="invalid-feedback">رقم الجوال مطلوب.</div>
              )}
            </div>
          </div>

          {/* Investment Amount */}
          <div className="col-sm-6 attainments-form-group">
            <div className="form-floating">
              <input
                type="number"
                className={`form-control ${status.error && !formData.investmentAmount ? "is-invalid" : ""}`}
                id="investmentAmount"
                name="investmentAmount"
                value={formData.investmentAmount}
                onChange={handleChange}
                placeholder="مبلغ الاستثمار المتوقع"
                required
                min="100"
              />
              <label htmlFor="investmentAmount">مبلغ الاستثمار المتوقع</label>
              {status.error && !formData.investmentAmount && (
                <div className="invalid-feedback">مبلغ الاستثمار مطلوب ويجب أن يكون 100 دولار على الأقل.</div>
              )}
            </div>
          </div>

          {/* Status Messages */}
          {status.loading && (
            <div className="col-12">
              <div className="alert alert-info" role="alert">
                جارٍ الإرسال...
              </div>
            </div>
          )}
          {status.success && (
            <div className="col-12">
              <div className="alert alert-success" role="alert">
                {status.success}
              </div>
            </div>
          )}
          {status.error && (
            <div className="col-12">
              <div className="alert alert-danger" role="alert">
                {status.error}
              </div>
            </div>
          )}

          {/* Submit Button */}
          <div className="col-12">
            <button
              type="submit"
              disabled={status.loading}
              className="btn btn-success w-100 submit-button"
            >
              {status.loading ? "جارٍ الإرسال..." : "إرسال"}
            </button>
          </div>
        </div>
      </form>
      <div className="col-12 mt-4">
        <Link href="#next-section" className="d-flex gap-4 align-items-center next-chapter">
          <span className="page">5/6</span>
          <span className="next">القسم التالي</span>
          <span className="icon">
            <i className="ph ph-arrow-elbow-right-down"></i>
          </span>
        </Link>
      </div>
    </section>
  );
};

export default Attainments;


--- C:\Users\hanos\sytech\components\Bootstrap.tsx ---
// components/Bootstrap.tsx
"use client";
import React, { useEffect } from "react";

const Bootstrap = ({ children }: { children: React.ReactNode }) => {
  useEffect(() => {
    import("bootstrap");
  }, []);
  return <>{children}</>;
};

export default Bootstrap;


--- C:\Users\hanos\sytech\components\Experience.tsx ---
// components/Experience.tsx
"use client";
import React, { useState, ChangeEvent, FormEvent, useRef, useEffect } from "react";
import Link from "next/link";
import SectionTitle from "./SectionTitle";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

interface FormDataState {
  fullName: string;
  email: string;
  phone: string;
  linkedin: string;
  website: string;
  pitchDeck: File | null;
}

interface SubmitProjectResponse {
  success: boolean;
  message?: string;
}

interface Status {
  loading: boolean;
  success: string | null;
  error: string | null;
}

const Experience: React.FC = () => {
  const [formData, setFormData] = useState<FormDataState>({
    fullName: "",
    email: "",
    phone: "",
    linkedin: "",
    website: "",
    pitchDeck: null,
  });

  const [status, setStatus] = useState<Status>({
    loading: false,
    success: null,
    error: null,
  });

  const formRef = useRef<HTMLFormElement>(null);

  useEffect(() => {
    const formGroups = gsap.utils.toArray<HTMLElement>(".experience-form-group");
    gsap.fromTo(
      formGroups,
      { opacity: 0, y: 50 },
      {
        opacity: 1,
        y: 0,
        stagger: 0.15,
        duration: 0.8,
        ease: "power2.out",
        scrollTrigger: {
          trigger: ".experience",
          start: "top 80%",
        },
      }
    );
    gsap.fromTo(
      ".submit-button",
      { opacity: 0, y: 30 },
      {
        opacity: 1,
        y: 0,
        duration: 1.0,
        ease: "power2.out",
        scrollTrigger: {
          trigger: ".experience",
          start: "top 80%",
        },
      }
    );
  }, []);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, type, files, value } = e.target;
    if (type === "file" && files?.length) {
      setFormData((prev) => ({ ...prev, [name]: files[0] }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setStatus({ loading: true, success: null, error: null });

    try {
      const data = new FormData();
      data.append("fullName", formData.fullName);
      data.append("email", formData.email);
      data.append("phone", formData.phone);
      data.append("linkedin", formData.linkedin);
      data.append("website", formData.website);
      if (formData.pitchDeck) {
        data.append("pitchDeck", formData.pitchDeck);
      }

      const response = await fetch("/api/submit-project", {
        method: "POST",
        body: data,
      });

      const contentType = response.headers.get("Content-Type") || "";
      if (!contentType.includes("application/json")) {
        const text = await response.text();
        console.error(`Invalid Content-Type: ${contentType}\nResponse body: ${text}`);
        throw new Error(`Invalid Content-Type: ${contentType}`);
      }

      const resData: SubmitProjectResponse = await response.json();
      if (response.ok && resData.success) {
        setStatus({ loading: false, success: "تم إرسال النموذج بنجاح!", error: null });
        setFormData({
          fullName: "",
          email: "",
          phone: "",
          linkedin: "",
          website: "",
          pitchDeck: null,
        });
        formRef.current?.reset();
      } else {
        setStatus({
          loading: false,
          success: null,
          error: resData.message || "حدث خطأ غير متوقع.",
        });
      }
    } catch (err: any) {
      console.error("Fetch Error:", err);
      setStatus({
        loading: false,
        success: null,
        error: err.message || "حدث خطأ أثناء الإرسال. يرجى المحاولة لاحقًا.",
      });
    }
  };

  return (
    <section id="experience" className="experience section position-relative pb-5 mb-5" dir="rtl">
      <SectionTitle subtitle="إذا كنت رائد أعمال سوري، حياك الله" title="ابعتلنا مشروعك لندرسه" />
      <form
        ref={formRef}
        onSubmit={handleSubmit}
        encType="multipart/form-data"
        className="contact-form needs-validation"
        noValidate
      >
        <div className="row g-4 g-xl-5">
          {/* Full Name */}
          <div className="col-sm-6 experience-form-group">
            <div className="form-floating">
              <input
                type="text"
                className={`form-control ${status.error && !formData.fullName ? "is-invalid" : ""}`}
                id="fullName"
                name="fullName"
                value={formData.fullName}
                onChange={handleChange}
                placeholder="الاسم الكامل"
                required
              />
              <label htmlFor="fullName">الاسم الكامل</label>
              {status.error && !formData.fullName && (
                <div className="invalid-feedback">الاسم الكامل مطلوب.</div>
              )}
            </div>
          </div>

          {/* Email */}
          <div className="col-sm-6 experience-form-group">
            <div className="form-floating">
              <input
                type="email"
                className={`form-control ${status.error && !formData.email ? "is-invalid" : ""}`}
                id="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                placeholder="البريد الإلكتروني"
                required
              />
              <label htmlFor="email">البريد الإلكتروني</label>
              {status.error && !formData.email && (
                <div className="invalid-feedback">البريد الإلكتروني مطلوب.</div>
              )}
            </div>
          </div>

          {/* Phone */}
          <div className="col-sm-6 experience-form-group">
            <div className="form-floating">
              <input
                type="tel"
                className={`form-control ${status.error && !formData.phone ? "is-invalid" : ""}`}
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleChange}
                placeholder="رقم الجوال"
                required
              />
              <label htmlFor="phone">رقم الجوال</label>
              {status.error && !formData.phone && (
                <div className="invalid-feedback">رقم الجوال مطلوب.</div>
              )}
            </div>
          </div>

          {/* LinkedIn */}
          <div className="col-sm-6 experience-form-group">
            <div className="form-floating">
              <input
                type="url"
                className={`form-control ${status.error && !formData.linkedin ? "is-invalid" : ""}`}
                id="linkedin"
                name="linkedin"
                value={formData.linkedin}
                onChange={handleChange}
                placeholder="لينكدإن"
                required
              />
              <label htmlFor="linkedin">لينكدإن</label>
              {status.error && !formData.linkedin && (
                <div className="invalid-feedback">لينكدإن مطلوب.</div>
              )}
            </div>
          </div>

          {/* Website */}
          <div className="col-sm-6 experience-form-group">
            <div className="form-floating">
              <input
                type="url"
                className={`form-control ${status.error && !formData.website ? "is-invalid" : ""}`}
                id="website"
                name="website"
                value={formData.website}
                onChange={handleChange}
                placeholder="الموقع الإلكتروني"
                required
              />
              <label htmlFor="website">الموقع الإلكتروني</label>
              {status.error && !formData.website && (
                <div className="invalid-feedback">الموقع الإلكتروني مطلوب.</div>
              )}
            </div>
          </div>

          {/* Pitch Deck */}
          <div className="col-sm-6 experience-form-group">
            <label htmlFor="pitchDeck" className="form-label">
              تحميل عرض المشروع (PDF)
            </label>
            <input
              type="file"
              className={`form-control ${status.error && !formData.pitchDeck ? "is-invalid" : ""}`}
              id="pitchDeck"
              name="pitchDeck"
              accept="application/pdf"
              onChange={handleChange}
              required
            />
            {status.error && !formData.pitchDeck && (
              <div className="invalid-feedback">تحميل عرض المشروع مطلوب.</div>
            )}
          </div>

          {/* Status Messages */}
          {status.loading && (
            <div className="col-12">
              <div className="alert alert-info" role="alert">
                جارٍ الإرسال...
              </div>
            </div>
          )}
          {status.success && (
            <div className="col-12">
              <div className="alert alert-success" role="alert">
                {status.success}
              </div>
            </div>
          )}
          {status.error && (
            <div className="col-12">
              <div className="alert alert-danger" role="alert">
                {status.error}
              </div>
            </div>
          )}

          {/* Submit Button */}
          <div className="col-12">
            <button
              type="submit"
              disabled={status.loading}
              className="btn btn-success w-100 submit-button"
            >
              {status.loading ? "جارٍ الإرسال..." : "إرسال"}
            </button>
          </div>
        </div>
      </form>
    </section>
  );
};

export default Experience;


--- C:\Users\hanos\sytech\components\GSAPAnimations.tsx ---
// components/GSAPAnimations.tsx

"use client";

import { useEffect } from "react";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

const GSAPAnimations = () => {
  useEffect(() => {
    gsap.registerPlugin(ScrollTrigger);

    // Example GSAP animation targeting elements with the class 'animate-me'
    const animation = gsap.from(".animate-me", {
      scrollTrigger: {
        trigger: ".animate-me",
        start: "top 80%",
      },
      y: 100,
      opacity: 0,
      duration: 1,
      ease: "power2.out",
    });

    // Cleanup function to kill only this specific ScrollTrigger
    return () => {
      if (animation.scrollTrigger) {
        animation.scrollTrigger.kill();
      }
    };
  }, []);

  return null; // This component doesn't render anything
};

export default GSAPAnimations;


--- C:\Users\hanos\sytech\components\Header.tsx ---
import React, { Dispatch, SetStateAction } from "react";
import Logo from "@/public/images/logo.png";
import Image from "next/image";
import Link from "next/link";
const Header = ({ setNavOpen, navOpen, classes }: { setNavOpen: Dispatch<SetStateAction<boolean>>; navOpen: boolean; classes?: string }) => {
  return (
    <header className="header">
      <div className="container-fluid d-flex align-items-center justify-content-between">
        <Link href="/" className={classes}>
          <Image src={Logo} alt="logo" />
        </Link>

        <button onClick={() => setNavOpen((p) => !p)} className="bg-transparent border-0 d-xl-none">
          <div className={`nav-icon ${navOpen ? "open" : ""}`}>
            <span></span>
            <span></span>
            <span></span>
          </div>
        </button>
      </div>
    </header>
  );
};

export default Header;


--- C:\Users\hanos\sytech\components\Hero.tsx ---
import Image from "next/image";
import React from "react";
import HeroImg from "@/public/images/hero.png";
import Typewriter from "typewriter-effect";
import Link from "next/link";
import { useGSAP } from "@gsap/react";
import SplitType from "split-type";
import gsap from "gsap";

const Hero = ({ classes }: { classes?: string }) => {
  useGSAP(() => {
    gsap.from(".img-wrapper", { duration: 1.5, scale: 1.5, ease: "back", delay: 0.3, opacity: 0 });
    gsap.from(".work-btn", { duration: 1.2, scale: 0, opacity: 0, ease: "bounce" });
    gsap.from(".contact-btn", { duration: 1.2, scale: 0, opacity: 0, ease: "bounce" });

    const freelancer = SplitType.create(".freelancer", { types: 'words' }).words;
    const desc = SplitType.create(".description", { types: 'words' }).words;
    gsap.from(freelancer, { duration: 1.5, opacity: 0, ease: "bounce", stagger: 0.2 });
    gsap.from(desc, { duration: 1, opacity: 0, stagger: 0.2 });
  });
  
  return (
    <section id="top" className={`hero ${classes}`}>
      <div className="row gx-4 justify-content-center align-items-center">
        <div className="col-12 col-md-6 col-xl-6 hero-content">
          <div>
            <h4 className="text-uppercase freelancer">سيرياتك</h4>
            <Typewriter
              component={"h1"}
              options={{
                strings: ["رائد أعمال طموح", "مستثمر ذكي", "مشروع ناجح"],
                autoStart: true,
                loop: true,
              }}
            />
            <p className="description">مسرعة أعمال سورية مساهمة خاصة</p>
          </div>
          <div className="d-flex gap-4">
            <Link href="#attainments" className="btn work-btn text-capitalize btn-secondary">
              سجل كمستثمر
            </Link>
            <Link href="#experience" className="btn contact-btn text-capitalize btn-outline-secondary">
              قدم مشروعك
            </Link>
          </div>
        </div>
        <div className="col-12 col-md-5 offset-md-1 offset-xxl-2 col-xl-4 d-flex justify-content-center">
          <div className="img-wrapper">
            <div className="waves-top">
              <span></span>
              <span></span>
              <span></span>
              <span></span>
            </div>
            <Image className="img-fluid rounded-circle hero-img" priority={true} src={HeroImg} alt="" />
            <div className="waves-bottom">
              <span></span>
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
        </div>
        <div className="col-12">
          <Link href="#about_me" className="d-flex gap-4 align-items-center next-chapter mt-5">
            <span className="page">2/6</span>
            <span className="next">القسم التالي</span>
            <span className="icon">
              <i className="ph ph-arrow-elbow-right-down"></i>
            </span>
          </Link>
        </div>
      </div>
    </section>
  );
};

export default Hero;


--- C:\Users\hanos\sytech\components\Navigation.tsx ---
import Image from "next/image";
import React, { Dispatch, SetStateAction, useEffect, useRef } from "react";
import Logo from "@/public/images/logo.png";
import Link from "next/link";
import shuffleLetters from "shuffle-letters";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";

const Navigation = ({
  setNavOpen,
  navOpen,
}: {
  setNavOpen: Dispatch<SetStateAction<boolean>>;
  navOpen: boolean;
}) => {
  const navRef = useRef<HTMLElement>(null);

  useEffect(() => {
    const handleClassChange = (mutationsList: MutationRecord[], observer: MutationObserver) => {
      mutationsList.forEach((mutation) => {
        if (mutation.type === "attributes" && mutation.attributeName === "class") {
          const target = mutation.target as HTMLElement;
          if (target.classList.contains("active")) {
            const textElement = target.querySelector(".text");
            if (textElement) {
              shuffleLetters(textElement, { iterations: 5 });
            }
          }
        }
      });
    };

    const observer = new MutationObserver(handleClassChange);
    const config = { attributes: true, subtree: true, attributeFilter: ["class"] };

    if (navRef.current) {
      observer.observe(navRef.current, config);
    }

    return () => {
      observer.disconnect();
    };
  }, []);

  useGSAP(() => {
    gsap.to(".navigation", { "--height": "100%", duration: 1, ease: "power1.inOut" });
    gsap.from(".nav-link", { duration: 0.8, delay: 0.5, opacity: 0, stagger: 0.1 });
  });

  return (
    <>
      <nav ref={navRef} className={`navigation ${navOpen ? "opened" : ""}`} id="navigation">
        <Image src={Logo} className="mb-4 d-xl-none" alt="logo" />
        <ul>
          <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#top" className="active">
              <span>01</span> <span className="text">المقدمة</span>{" "}
            </Link>
          </li>
          <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#about_me">
              <span>02</span> <span className="text">من نحن</span>{" "}
            </Link>
          </li>
          <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#services">
              <span>03</span> <span className="text">شو بنعمل</span>{" "}
            </Link>
          </li>
          <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#attainments">
              <span>04</span> <span className="text">المستثمر</span>{" "}
            </Link>
          </li>
          {/* <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#fun_facts">
              <span>05</span> <span className="text">facts</span>{" "}
            </Link>
          </li> */}
          <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#experience">
              <span>05</span> <span className="text">رائد الأعمال</span>{" "}
            </Link>
          </li>
          {/* <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#projects">
              <span>07</span> <span className="text">projects</span>{" "}
            </Link>
          </li> */}
          {/* <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#how_i_work">
              <span>06</span> <span className="text">how i work</span>{" "}
            </Link>
          </li> */}
          {/* <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#blogs">
              <span>08</span> <span className="text">Blogs</span>{" "}
            </Link>
          </li> */}
          {/* <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#testimonials">
              <span>09</span> <span className="text">testimonials</span>{" "}
            </Link>
          </li> */}
          {/* <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#contact">
              <span>06</span> <span className="text">حاكينا</span>{" "}
            </Link>
          </li> */}
        </ul>
      </nav>
      <div onClick={() => setNavOpen(false)} className="nav-overlay d-xl-none"></div>
    </>
  );
};

export default Navigation;


--- C:\Users\hanos\sytech\components\SectionOverlayText.tsx ---
import React, { useEffect, useRef } from "react";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { useGSAP } from "@gsap/react";

gsap.registerPlugin(ScrollTrigger);

const SectionOverlayText = ({ text }: { text: string }) => {
  const sectionTitleRef = useRef(null);

  useGSAP(() => {
    const element = sectionTitleRef.current;

    const anim = gsap.fromTo(
      element,
      { y: "50%" },
      {
        y: "-50%",
        scrollTrigger: {
          trigger: ".about",
          start: "top bottom",
          end: "bottom top",
          scrub: true,
        },
      },
    );

    return () => {
      anim.kill();
      ScrollTrigger.getAll().forEach((trigger) => trigger.kill()); // Clean up all ScrollTriggers
    };
  });

  return (
    <span ref={sectionTitleRef} className="section-title-overlay-text">
      {text}
    </span>
  );
};

export default SectionOverlayText;


--- C:\Users\hanos\sytech\components\SectionTitle.tsx ---
import React, { useEffect, useRef } from "react";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { useGSAP } from "@gsap/react";

type Props = {
  subtitle: string;
  title: string;
};

gsap.registerPlugin(ScrollTrigger);

const SectionTitle = ({ title, subtitle }: Props) => {
  const sectionTitleRef = useRef(null);

  useGSAP(() => {
    const element = sectionTitleRef.current;

    const fromAnimation = gsap.from(element, {
      opacity: 0,
      y: 50,
      scrollTrigger: {
        trigger: element,
        start: "top bottom", // adjust as needed
      },
    });

    const toAnimation = gsap.to(element, {
      "--height": "100%",
      delay: 0.5,
      scrollTrigger: {
        trigger: element,
        start: "top bottom", // adjust as needed
      },
    });

    return () => {
      fromAnimation.kill();
      toAnimation.kill();
      ScrollTrigger.getAll().forEach((trigger) => trigger.kill()); // Clean up all ScrollTriggers
    };
  });

  return (
    <div ref={sectionTitleRef} className="section-title text-capitalize">
      <h4>{subtitle}</h4>
      <h2>{title}</h2>
    </div>
  );
};

export default SectionTitle;


--- C:\Users\hanos\sytech\components\Services.tsx ---
// components/Services.tsx
"use client";

import React, { useRef } from "react";
import { Autoplay, Pagination } from "swiper/modules";
import { Swiper, SwiperSlide } from "swiper/react";
import SectionTitle from "./SectionTitle";
import useGSAP from "@/hooks/useGSAP";
import gsap from "gsap";
import "swiper/css";
import "swiper/css/pagination";
import "swiper/css/autoplay";

interface Service {
  id: number;
  number: string;
  title: string;
  features: string[];
}

const servicesData: Service[] = [
  {
    id: 1,
    number: "01",
    title: "رائد الأعمال",
    features: [
      "عندك مشروع ناشيء",
      "عندك تيم لو من شخصين",
      "المشروع يعمل",
      "عم يحقق أرباح أو لا مش مشكلة",
      "قدم عرض تقديمي إلينا",
    ],
  },
  {
    id: 2,
    number: "02",
    title: "سيرياتك",
    features: [
      "بندرس عرضك التقديمي",
      "مستشارينا بيقيموا المشروع",
      "بنرسل مشروعك للمستثمرين",
      "بنجمع ردود المستثمرين",
      "يصلك إيميل قبول أو رفض",
    ],
  },
  {
    id: 3,
    number: "03",
    title: "المستثمر",
    features: [
      "بيسجل بياناته للتواصل",
      "بنرسل له المشاريع المقترحة",
      "بنرفق تقييمنا مع العرض التقديمي",
      "ننتظر الرد بالقبول أو الرفض",
      "ترتيب اجتماع مع رائد الأعمال",
    ],
  },
];

const Services: React.FC = () => {
  const sectionRef = useRef<HTMLElement>(null);

  useGSAP(
    (self) => {
      const serviceCards = self.selector(".service-card");

      gsap.from(serviceCards, {
        stagger: 0.2,
        opacity: 0,
        y: 50,
        duration: 1.5,
        ease: "power2.out",
        scrollTrigger: {
          trigger: sectionRef.current,
          start: "top 60%",
          end: "top 20%",
          toggleActions: "play none none reverse",
        },
      });
    },
    sectionRef
  );

  return (
    <section ref={sectionRef} id="services" className="services section position-relative">
      <SectionTitle subtitle="رح اشرحلك خطوات شغلنا" title="كيف بنشتغل" />

      <Swiper
        slidesPerView={"auto"}
        spaceBetween={24}
        loop={true}
        autoplay={{
          delay: 5000,
          disableOnInteraction: false,
        }}
        pagination={{ clickable: true }}
        modules={[Autoplay, Pagination]}
        breakpoints={{
          768: {
            slidesPerView: 2,
            spaceBetween: 24,
          },
          1550: {
            slidesPerView: 3,
            spaceBetween: 24,
          },
        }}
        dir="ltr"
        className="swiper service-swiper"
      >
        {servicesData.map((service) => (
          <SwiperSlide key={service.id} className="overflow-visible p-3">
            <div className="service-card">
              <div className="card-inner"></div>
              <div className="content">
                <div className="number-circle">
                  <div className="waves-top-sm">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                  <h2>{service.number}</h2>
                  <div className="waves-bottom-sm">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
                <h4>{service.title}</h4>
                <ul className="service-list">
                  {service.features.map((feature, index) => (
                    <li key={index}>
                      <i className="ph ph-caret-double-right"></i> {feature}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </SwiperSlide>
        ))}

        {/* Swiper Pagination */}
        <div className="swiper-pagination"></div>
      </Swiper>

      <div className="col-12">
        <a href="#attainments" className="d-flex gap-4 align-items-center next-chapter">
          <span className="page">4/6</span>
          <span className="next">القسم التالي</span>
          <span className="icon">
            <i className="ph ph-arrow-elbow-right-down"></i>
          </span>
        </a>
      </div>
    </section>
  );
};

export default Services;


--- C:\Users\hanos\sytech\hooks\useGSAP.ts ---
// hooks/useGSAP.ts
import { useEffect, RefObject } from "react";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

const useGSAP = (
  animationCallback: (self: gsap.Context) => void,
  scopeRef: RefObject<HTMLElement>
) => {
  useEffect(() => {
    if (typeof window !== "undefined" && scopeRef.current) {
      const context = gsap.context((self) => {
        animationCallback(self);
      }, scopeRef.current);
      
      // Cleanup function to revert animations on component unmount
      return () => context.revert();
    }
  }, [animationCallback, scopeRef]);
};

export default useGSAP;


--- C:\Users\hanos\sytech\public\scss\bootstrap.scss ---
$black: #000000;
$yellow: #ffdb67;
$white: #ffffff;

$btn-border-radius: 50px;
$btn-padding-x: 16px;
$btn-padding-y: 10px;
$btn-font-size: 14px;
$btn-font-weight: 500;

$primary: $yellow;
$secondary: #000000;

// gutters

$spacer: 1rem;
$gutters: (
  0: 0,
  1: $spacer * 0.25,
  2: $spacer * 0.5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3,
  6: $spacer * 4.5,
  7: $spacer * 6,
  8: $spacer * 7.5,
  9: $spacer * 9,
  10: $spacer * 10,
);

/* libs */
@import "bootstrap/scss/bootstrap";


--- C:\Users\hanos\sytech\public\scss\mixins.scss ---
// mixins

@mixin min-width($breakpoint) {
  $breakpoints: map-get($grid-breakpoints, $breakpoint);

  @if $breakpoints {
    @media (min-width: $breakpoints) {
      @content;
    }
  } @else {
    @warn "No valid breakpoint found for `#{$breakpoint}`. Valid breakpoints are: #{map-keys($grid-breakpoints)}.";
  }
}


--- C:\Users\hanos\sytech\public\scss\styles.scss ---
:root {
  --black: 0, 0, 0;
  --primary: 255, 219, 103;
  --white: 255, 255, 255;
}

@import url("https://fonts.googleapis.com/css2?family=Readex+Pro:wght@200;300;400;500;600;700&display=swap");

@import "bootstrap.scss";
@import "phosphor-icons/src/css/icons.css";
@import "swiper/css";
@import "swiper/css/pagination";
@import "swiper/css/autoplay";
@import "swiper/css/navigation";
@import "swiper/css/scrollbar";
@import "mixins.scss";
@import "../../node_modules/react-modal-video/scss/modal-video.scss";

// Reset
body {
  font-family: "Poppins", sans-serif;
  background-color: rgb(var(--primary));
  color: rgb(var(--black));
  font-size: 16px;
  overflow-x: hidden;
}
a {
  text-decoration: none;
  color: rgb(var(--black));
}
p,
span,
h1,
h2,
h3,
h4,
h5,
h6 {
  color: rgb(var(--black));
  margin-bottom: 0;
}
@media screen and (min-width: 1400px) {
  .btn {
    padding: 12px 24px;
    font-size: 18px;
  }
}
.container-fluid {
  position: relative;
  z-index: 2;
}
@media screen and (min-width: 1750px) {
  .container-fluid {
    max-width: 1740px;
  }
  .navigation {
    left: calc((100% - 1680px) / 2 + 1290px);
    width: 360px;
  }
}

/* HTML: <div class="loader"></div> */
.loader-container {
  height: 100vh;
  .loader {
    --R: 30px;
    --g1: #514b82 96%, #0000;
    --g2: #eeeeee 96%, #0000;
    width: calc(2 * var(--R));
    aspect-ratio: 1;
    border-radius: 50%;
    display: grid;
    mask: linear-gradient(#000 0 0);
    -webkit-mask: linear-gradient(#000 0 0);
    animation: l30 2s infinite linear;
  }
  .loader::before,
  .loader::after {
    content: "";
    grid-area: 1/1;
    width: 50%;
    background:
      radial-gradient(farthest-side, var(--g1)) calc(var(--R) + 0.866 * var(--R) - var(--R)) calc(var(--R) - 0.5 * var(--R) - var(--R)),
      radial-gradient(farthest-side, var(--g1)) calc(var(--R) + 0.866 * var(--R) - var(--R)) calc(var(--R) - 0.5 * var(--R) - var(--R)),
      radial-gradient(farthest-side, var(--g2)) calc(var(--R) + 0.5 * var(--R) - var(--R)) calc(var(--R) - 0.866 * var(--R) - var(--R)),
      radial-gradient(farthest-side, var(--g1)) 0 calc(-1 * var(--R)),
      radial-gradient(farthest-side, var(--g2)) calc(var(--R) - 0.5 * var(--R) - var(--R)) calc(var(--R) - 0.866 * var(--R) - var(--R)),
      radial-gradient(farthest-side, var(--g1)) calc(var(--R) - 0.866 * var(--R) - var(--R)) calc(var(--R) - 0.5 * var(--R) - var(--R)),
      radial-gradient(farthest-side, var(--g2)) calc(-1 * var(--R)) 0,
      radial-gradient(farthest-side, var(--g1)) calc(var(--R) - 0.866 * var(--R) - var(--R)) calc(var(--R) + 0.5 * var(--R) - var(--R));
    background-size: calc(2 * var(--R)) calc(2 * var(--R));
    background-repeat: no-repeat;
  }
  .loader::after {
    transform: rotate(180deg);
    transform-origin: right;
  }

  @keyframes l30 {
    100% {
      transform: rotate(-1turn);
    }
  }
}

.grain {
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  pointer-events: none;
  z-index: 300;
  transform: translateZ(0);

  &:before {
    content: "";
    top: -10rem;
    left: -10rem;
    width: calc(100% + 20rem);
    height: calc(100% + 20rem);
    z-index: 301;
    position: fixed;
    background-image: url(https://upload.wikimedia.org/wikipedia/commons/5/5c/Image_gaussian_noise_example.png);
    opacity: 0.12;
    pointer-events: none;
    -webkit-animation: noise 1s steps(2) infinite;
    animation: noise 1s steps(2) infinite;
  }

  @-webkit-keyframes noise {
    to {
      transform: translate3d(-7rem, 0, 0);
    }
  }

  @keyframes noise {
    0% {
      transform: translate3d(0, 9rem, 0);
    }
    10% {
      transform: translate3d(-1rem, -4rem, 0);
    }
    20% {
      transform: translate3d(-8rem, 2rem, 0);
    }
    30% {
      transform: translate3d(9rem, -9rem, 0);
    }
    40% {
      transform: translate3d(-2rem, 7rem, 0);
    }
    50% {
      transform: translate3d(-9rem, -4rem, 0);
    }
    60% {
      transform: translate3d(2rem, 6rem, 0);
    }
    70% {
      transform: translate3d(7rem, -8rem, 0);
    }
    80% {
      transform: translate3d(-9rem, 1rem, 0);
    }
    90% {
      transform: translate3d(6rem, -5rem, 0);
    }
    to {
      transform: translate3d(-7rem, 0, 0);
    }
  }
}

.header {
  padding: 14px 0;
  width: 100%;
  z-index: 10;
  left: 0;
  right: 0;
  backdrop-filter: blur(3px);
  position: fixed;
  img {
    max-width: 100%;
  }
  .nav-icon {
    width: 36px;
    height: 22px;
    position: relative;
    transform: rotate(0deg);
    transition: 0.5s ease-in-out;
    cursor: pointer;
    z-index: 15;
    span {
      display: block;
      position: absolute;
      height: 2px;
      width: 100%;
      background: rgb(var(--black));
      opacity: 1;
      left: 0;
      transform: rotate(0deg);
      transition: 0.25s ease-in-out;
    }
  }
  .nav-icon span:nth-child(1) {
    top: 0px;
  }

  .nav-icon span:nth-child(2) {
    top: 10px;
  }

  .nav-icon span:nth-child(3) {
    top: 20px;
  }

  .nav-icon.open span:nth-child(1) {
    top: 10px;
    transform: rotate(135deg);
    background-color: rgb(var(--white));
  }

  .nav-icon.open span:nth-child(2) {
    opacity: 0;
    left: -60px;
  }

  .nav-icon.open span:nth-child(3) {
    top: 10px;
    transform: rotate(-135deg);
    background-color: rgb(var(--white));
  }
}

// navigation
.navigation {
  position: absolute;
  --height: 0;
  @media (max-width: 1200px) {
    &:dir(ltr) {
      transform: translateX(-100%);
      left: 0;
    }
    &:dir(rtl) {
      transform: translateX(100%);
      right: 0;
    }
    transition-duration: 500ms;
    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    padding: 20px;
    top: 0;
    bottom: 0;
    max-width: 300px;
    width: 100%;
    height: 100%;
    overflow-y: auto;
  }
  &.opened {
    @media (max-width: 1200px) {
      transform: translateX(0);
      position: fixed;
      background-color: rgb(var(--primary));
    }
  }
  @include min-width(xl) {
    position: fixed;
    top: 100px;
    right: 0;
    &:dir(rtl) {
      left: 0;
      right: auto;
    }
    display: block;
    transform: translateX(0);
  }
  z-index: 100;
  &::before {
    content: "";
    position: absolute;
    top: 100px;
    @include min-width(xl) {
      top: 0;
    }
    &:dir(ltr) {
      left: 0;
    }
    &:dir(rtl) {
      right: 0;
    }
    width: 2px;
    height: var(--height);
    background: rgb(var(--black));
    opacity: 0.3;
  }
  ul {
    list-style: none;
    @include min-width(xl) {
      width: 300px;
    }
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 8px;
    position: relative;
    li > a {
      color: rgb(var(--black));
      text-transform: uppercase;
      display: inline-flex;
      align-items: center;
      gap: 30px;
      padding-top: 6px;
      padding-bottom: 6px;
      font-size: 20px;
      font-weight: 500;
      &:dir(ltr) {
        padding-left: 34px;
        border-left: 2px solid transparent;
      }
      &:dir(rtl) {
        padding-right: 34px;
        border-right: 2px solid transparent;
      }
      transition-duration: 300ms;

      display: block;
      position: relative;
      span {
        font-size: 16px;
      }
      &::after {
        transition-duration: 600ms;
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 0;
        height: 100%;
        background: rgb(var(--black));
        opacity: 0.15;
        &:dir(rtl) {
          left: auto;
          right: 0;
        }
      }
      &:hover {
        &::after {
          animation: grow 600ms ease-in-out;
          width: 100%;
        }
        border-left: 2px solid rgb(var(--black));
        &:dir(rtl) {
          border-left: none;
          border-right: 2px solid rgb(var(--black));
        }
      }

      &.active {
        &::after {
          content: "";
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          animation: grow 600ms ease-in-out;
          height: 100%;
          background: rgb(var(--black));
          opacity: 0.15;
          &:dir(rtl) {
            left: auto;
            right: 0;
          }
        }
        border-left: 2px solid rgb(var(--black));
        &:dir(rtl) {
          border-left: none;
          border-right: 2px solid rgb(var(--black));
        }
      }
    }
  }
  .contact {
    padding-top: 20px;
    &:dir(ltr) {
      padding-left: 34px;
    }
    &:dir(rtl) {
      padding-right: 34px;
    }
    display: flex;
    flex-direction: column;
    gap: 8px;
    a {
      font-size: 18px;
      color: rgb(var(--black));
    }
  }
}

.nav-overlay {
  width: 100%;
  height: 100%;
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 12;
  opacity: 0;
  transition-duration: 500ms;
  transform: translateX(100%);
}

.navigation.opened + .nav-overlay,
.navigation-left-bar.opened + .nav-overlay,
.navigation-sticky.opened + .nav-overlay,
.navigation-topbar.opened + .nav-overlay {
  opacity: 1;
  transform: translateX(0);
}

// hero section
.hero {
  min-height: 100vh;
  &.hero-left-bar {
    min-height: 85vh;
    .next-chapter {
      @include min-width(lg) {
        padding-top: 80px;
      }
      padding-bottom: 40px;
    }
  }
  padding-top: 100px;
  @include min-width(xxl) {
    padding-top: 200px;
  }
  height: auto;
  .row {
    height: 100%;
    &:dir(rtl) {
      .hero-content {
        text-align: right;
      }
    }
    .hero-content {
      padding-top: 60px;
      padding-bottom: 60px;
    }
    h4 {
      font-size: 22px;
      @include min-width(lg) {
        font-size: 40px;
      }
      margin-bottom: 8px;
      letter-spacing: 1px;
    }
    h1 {
      font-size: 40px;
      margin-bottom: 12px;
      @include min-width(md) {
        margin-bottom: 20px;
        font-size: 44px;
      }
      @include min-width(xxl) {
        font-size: 66px;
      }
      font-weight: 500;
      letter-spacing: -1px;
    }
    p {
      font-size: 24px;
      font-weight: 500;
      letter-spacing: -1px;
      margin-bottom: 40px;
    }
    .img-wrapper {
      max-height: 416px;
      max-width: 416px;
      position: relative;
      &:hover {
        .waves-top,
        .waves-bottom {
          opacity: 0;
        }
      }
      .hero-img {
        border: 2px solid rgb(var(--black));
      }
    }
  }
  .next-chapter {
    padding-top: 30px;
    @include min-width(lg) {
      padding-top: 160px;
    }
  }
}

// about section

.about {
  .section-title-overlay-text {
    top: 80px;
  }
  position: relative;
  padding-top: 60px;
  @include min-width(xl) {
    padding-top: 120px;
  }
  padding-bottom: 40px;
  z-index: 3;
  .about-desc {
    h2 {
      font-size: 32px;
      @include min-width(md) {
        font-size: 40px;
      }
      margin-bottom: 28px;
    }
    p.desc {
      @include min-width(xl) {
        font-size: 20px;
      }
      margin-bottom: 40px;
    }
  }
  .about-contact {
    p {
      font-size: 18px;
      font-weight: 500;
    }
    a,
    span {
      font-size: 20px;
      font-weight: 500;
    }
  }
  .experience-card {
    border: 1px solid rgb(var(--black));
    width: 100%;
    padding: 40px;
    text-align: center;
    transition-duration: 500ms;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgb(var(--primary));
    position: relative;
    z-index: 3;
    &::before {
      content: "";
      position: absolute;
      transition-duration: 500ms;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: 1px solid rgb(var(--black));
      transform: rotate(2.5deg);
      z-index: -1;
    }
    &::after {
      content: "";
      position: absolute;
      transition-duration: 500ms;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: 1px solid rgb(var(--black));
      transform: rotate(-2.5deg);
      z-index: -1;
    }
    &:hover {
      &::before,
      &::after {
        transform: rotate(0);
        opacity: 0;
      }
      .numbers .number-outline-one,
      .numbers .number-outline-two {
        transform: rotate(0);
        opacity: 0;
      }
    }
    p {
      font-size: 20px;
      font-weight: 500;
      position: relative;
      z-index: 1;
    }
    .numbers {
      z-index: 1;
      position: relative;
      span {
        font-size: 200px;
        font-weight: 700;
        line-height: 120%;
      }
      .number-outline-one,
      .number-outline-two {
        position: absolute;
        top: 0;
        -webkit-text-stroke: 1px #000;
        -webkit-text-fill-color: transparent;
        display: flex;
        justify-content: center;
        transition-duration: 500ms;
      }
      .number-outline-one {
        transform: rotate(6deg);
      }
      .number-outline-two {
        transform: rotate(-6deg);
      }
    }
  }
  .next-chapter {
    padding-top: 100px;
  }
}

/* services section */
.services {
  margin-top: 60px;
  @media (min-width: 992px) {
    margin-top: 60px;
  }
  padding-bottom: 40px;
  .section-title {
    padding-top: 60px;
  }
  .service-swiper {
    padding-bottom: 50px;
  }
  .swiper-pagination {
    .swiper-pagination-bullet {
      width: 12px;
      height: 12px;
      opacity: 0.5;
      background-color: #fff;
    }
    .swiper-pagination-bullet-active {
      opacity: 1;
    }
  }
  .next-chapter {
    margin-top: 50px;
    @media (min-width: 992px) {
      margin-top: 80px;
    }
  }
  .service-card {
    position: relative;
    padding: 16px;
    @include min-width(sm) {
      padding: 32px;
    }
    @media (min-width: 1200px) {
      padding: 50px;
    }
    border: 1px solid rgb(var(--black));
    .card-inner {
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
      background-color: rgb(var(--primary));
      z-index: 1;
    }
    .number-circle {
      .waves-top-sm,
      .waves-bottom-sm {
        opacity: 0;
      }
    }
    &::before,
    &::after {
      content: "";
      position: absolute;
      transition-duration: 500ms;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      border: 1px solid rgb(var(--black));
    }
    &:hover {
      &::before {
        transform: rotate(3.5deg);
        opacity: 1;
      }
      &::after {
        transform: rotate(-3.5deg);
        opacity: 1;
      }
      .number-circle {
        .waves-top-sm,
        .waves-bottom-sm {
          opacity: 1;
        }
      }
    }
    .content {
      position: relative;
      z-index: 2;
    }
    .number-circle {
      margin-bottom: 40px;
      width: 78px;
      height: 78px;
      border-radius: 50%;
      background-color: rgb(var(--primary));
      border: 1px solid rgb(var(--black));
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
      h2 {
        font-size: 32px;
        font-weight: 500;
      }
    }
    h4 {
      font-size: 24px;
      font-weight: 500;
      margin-bottom: 24px;
      padding-bottom: 8px;
      display: inline-block;
      border-bottom: 2px solid rgb(var(--black));
    }
    .service-list {
      list-style: none;
      padding-left: 0;
      display: flex;
      flex-direction: column;
      gap: 8px;
      li {
        display: flex;
        align-items: center;
        gap: 12px;
        color: rgb(var(--black));
        i {
          color: #343330;
        }
      }
    }
  }
}

/* attainments */
.attainments {
  padding: 60px 0;
  overflow-x: hidden;
  @media (min-width: 992px) {
    padding: 60px 0;
  }
  .section-title-overlay-text {
    top: 60px;
    &:dir(ltr) {
      left: 6%;
    }
    &:dir(ltr) {
      right: 6%;
    }
  }
  .section-title-sm {
    .top {
      &:dir(ltr) {
        padding: 20px 0 20px 32px;
        border-left: 2px solid rgb(var(--black));
      }
      &:dir(rtl) {
        padding: 20px 32px 20px 0;
        border-right: 2px solid rgb(var(--black));
      }
      h2 {
        margin-bottom: 12px;
        font-size: 28px;
        @include min-width(xxl) {
          font-size: 40px;
        }
        font-weight: 500;
      }
      span {
        @include min-width(xxl) {
          font-size: 20px;
        }
      }
    }
    .serial {
      color: rgba($color: #000000, $alpha: 0.5);
      @include min-width(lg) {
        transform: rotate(-90deg) translate(-24px, -8px);
      }
      transform: rotate(-90deg) translateX(-8px);
      font-size: 28px;
      @include min-width(lg) {
        font-size: 40px;
      }
      font-weight: 500;
      display: inline-block;
      margin-bottom: 40px;
    }
  }

  .skill {
    .progress {
      height: 3px;
      margin-top: 8px;
      background-color: rgb(var(--white));
      .progress-bar {
        background-color: rgb(var(--black));
        transition-duration: 4s;
        width: 0;
        animation-timing-function: ease-in-out;
      }
    }
  }

  .next-chapter {
    padding-top: 80px;
  }
}

// components

.next-chapter {
  &:hover {
    i {
      animation: updown 0.5s linear alternate-reverse infinite;
    }
  }
  .page {
    color: rgba($color: #000000, $alpha: 0.5);
    letter-spacing: -1px;
  }
  .next {
    color: rgb(var(--black));
    font-size: 20px;
    font-weight: 500;
    letter-spacing: -1px;
  }
  i {
    font-size: 24px;
    display: block;
    color: rgb(var(--black));
    transform: translateY(5px);
    align-self: flex-end;
    transition-duration: 500ms;
  }
}

// section title
.section-title {
  padding-left: 32px;
  padding-top: 24px;
  position: relative;
  @include min-width(xl) {
    padding-top: 36px;
    padding-left: 60px;
  }
  padding-bottom: 20px;
  --height: 0;
  &::before {
    content: "";
    position: absolute;
    top: 0;
    height: var(--height);
    width: 2px;
    background-color: rgb(var(--black));
  }
  &:dir(ltr) {
    &::before {
      left: 0;
    }
  }
  &:dir(rtl) {
    padding-left: 0;
    padding-right: 32px;
    @include min-width(xl) {
      padding-left: 0;
      padding-right: 60px;
    }
    &::before {
      right: 0;
    }
  }
  h4 {
    font-size: 16px;
    margin-bottom: 8px;
    @include min-width(xl) {
      font-size: 24px;
    }
    font-weight: 500;
  }
  h2 {
    font-size: 22px;
    @include min-width(sm) {
      font-size: 28px;
    }
    @include min-width(sm) {
      font-size: 40px;
    }
    @include min-width(xl) {
      font-size: 55px;
    }
    @include min-width(xxl) {
      font-size: 80px;
    }
    font-weight: 600;
  }
  margin-bottom: 42px;
}

.section-title-overlay-text {
  color: rgb(var(--black));
  font-family: Poppins;
  font-size: 35px;
  @include min-width(sm) {
    font-size: 80px;
  }
  @include min-width(lg) {
    font-size: 100px;
  }
  @include min-width(xxl) {
    font-size: 120px;
  }
  @media (min-width: 1800px) {
    font-size: 160px;
  }
  font-style: normal;
  font-weight: 800;
  line-height: 120%; /* 240px */
  text-transform: uppercase;
  opacity: 0.05;
  position: absolute;
  text-align: left;
  top: 0;
  left: 0;
  &:dir(rtl) {
    left: auto;
    right: 0;
  }
}

/* waves */
.waves-top {
  transition-duration: 300ms;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  span {
    display: block;
    width: 100%;
    height: 100%;
    opacity: 0.5;
    position: absolute;
    top: 0;
    left: 0;
    border-radius: 50%;
    border-top: 1px solid rgb(var(--black));
    animation: btnWavesTop 2.1s linear infinite;
    &:nth-child(2) {
      animation-delay: 0.5s;
    }
    &:nth-child(3) {
      animation-delay: 1s;
    }
    &:nth-child(4) {
      animation-delay: 1.5s;
    }
  }
}
.waves-bottom {
  @extend .waves-top;
  span {
    border-top: none;
    border-bottom: 1px solid rgb(var(--black));
    animation: btnWavesBottom 2.1s linear infinite;
  }
}

.waves-top-md {
  @extend .waves-top;
  span {
    border-bottom: none;
    border-top: 1px solid rgb(var(--black));
    animation: btnWavesTopMd 2.1s linear infinite;
  }
}

.waves-bottom-md {
  @extend .waves-top;
  span {
    border-top: none;
    border-bottom: 1px solid rgb(var(--black));
    animation: btnWavesBottomMd 2.1s linear infinite;
  }
}

.waves-top-sm {
  @extend .waves-top;
  span {
    animation: btnWavesSmTop 3.2s linear infinite;
    &:nth-child(2) {
      animation-delay: 0.8s;
    }
    &:nth-child(3) {
      animation-delay: 1.6s;
    }
    &:nth-child(4) {
      animation-delay: 2.4s;
    }
  }
}
.waves-bottom-sm {
  @extend .waves-bottom;
  span {
    animation: btnWavesSmBottom 3.2s linear infinite;
    &:nth-child(2) {
      animation-delay: 0.8s;
    }
    &:nth-child(3) {
      animation-delay: 1.6s;
    }
    &:nth-child(4) {
      animation-delay: 2.4s;
    }
  }
}

/* utilities */
.pb-120 {
  padding-bottom: 60px;
  @media (min-width: 1200px) {
    padding-bottom: 120px;
  }
}
.pb-60 {
  padding-bottom: 30px;
  @media (min-width: 1200px) {
    padding-bottom: 60px;
  }
}
.select-none {
  user-select: none;
}
.cursor-pointer {
  cursor: pointer;
}
// animations
@keyframes updown {
  0% {
    transform: translateY(12px);
  }

  100% {
    transform: translateY(5px);
  }
}

@keyframes btnWavesTop {
  from {
    transform: translateY(0);
    opacity: 1;
  }

  to {
    transform: translateY(-4rem);
    opacity: 0;
  }
}

@keyframes btnWavesBottom {
  from {
    transform: translateY(0);
    opacity: 1;
  }

  to {
    transform: translateY(4rem);
    opacity: 0;
  }
}

@keyframes btnWavesTopMd {
  from {
    transform: translateY(0);
    opacity: 1;
  }

  to {
    transform: translateY(-2rem);
    opacity: 0;
  }
}

@keyframes btnWavesBottomMd {
  from {
    transform: translateY(0);
    opacity: 1;
  }

  to {
    transform: translateY(2rem);
    opacity: 0;
  }
}

@keyframes btnWavesSmTop {
  from {
    transform: translateY(0);
    opacity: 1;
  }

  to {
    transform: translateY(-1rem);
    opacity: 0;
  }
}

@keyframes btnWavesSmBottom {
  from {
    transform: translateY(0);
    opacity: 1;
  }

  to {
    transform: translateY(1rem);
    opacity: 0;
  }
}

@keyframes grow {
  0% {
    width: 0%;
  }
  100% {
    width: 100%;
  }
}

.left-bar {
  display: none;
  @include min-width(xl) {
    display: flex;
  }
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  padding: 20px;
  border-right: 1px solid rgba($color: #000000, $alpha: 0.1);
  background-color: rgb(var(--primary));
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  z-index: 50;
  ul {
    padding: 0;
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 12px;
    li {
      a {
        font-size: 1.4rem;
        width: 40px;
        height: 40px;
        border: 1px solid rgba($color: #000000, $alpha: 0.05);
        display: flex;
        align-items: center;
        justify-content: center;
        transition-duration: 500ms;
        &:hover {
          background-color: rgb(var(--black));
          color: rgb(var(--white));
        }
      }
    }
  }
}

// email icon
.email-icon {
  display: none;
  @include min-width(xl) {
    display: flex;
  }
  width: 64px;
  height: 64px;

  align-items: center;
  justify-content: center;
  font-size: 2rem;
  background-color: rgb(var(--primary));
  position: fixed;
  top: 0;
  z-index: 102;
  &:dir(ltr) {
    right: 0;
  }
  &:dir(rtl) {
    left: 0;
  }
  border-bottom: 1px solid rgba($color: #000000, $alpha: 0.1);
  border-left: 1px solid rgba($color: #000000, $alpha: 0.1);
}
@keyframes goDown {
  0% {
    transform: translateY(-5px);
  }
  100% {
    transform: translateY(10px);
    opacity: 0;
  }
}
// navigation
.navigation-left-bar {
  position: sticky;
  background-color: rgb(var(--primary));
  --height: 0;
  border-top: 1px solid rgba($color: #000000, $alpha: 0.1);
  border-bottom: 1px solid rgba($color: #000000, $alpha: 0.1);
  .scroll-down {
    .scroll-anim {
      height: 30px;
      width: 20px;
      border: 2px solid rgba($color: #000000, $alpha: 0.2);
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      span {
        display: block;
        width: 3px;
        background-color: rgba($color: #000000, $alpha: 0.3);
        height: 6px;
        animation: goDown 2.5s ease-out infinite;
      }
    }
    display: flex;
    gap: 12px;
    justify-content: center;
    align-items: center;
    padding: 8px 12px;
    @include min-width(xxl) {
      padding: 12px 32px;
    }
    p {
      font-size: 12px;
      font-weight: 500;
      text-transform: uppercase;
    }
  }

  @media (max-width: 1200px) {
    &:dir(ltr) {
      transform: translateX(-120%);
      left: 0;
    }
    &:dir(rtl) {
      transform: translateX(120%);
      right: 0;
    }
    transition-duration: 500ms;
    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    padding: 20px;
    top: 0;
    bottom: 0;
    position: fixed;
    max-width: 300px;
    width: 100%;
    height: 100%;
    overflow-y: auto;
    img {
      margin-bottom: 20px;
    }
  }
  &.opened {
    @media (max-width: 1200px) {
      transform: translateX(0);
      position: fixed;
      ul {
        display: flex;
        flex-direction: column;
      }
      background-color: rgb(var(--primary));
    }
  }
  @include min-width(xl) {
    position: sticky;
    top: 0;
    margin-left: 81px;
    display: flex;
    align-items: center;
    transform: translateX(0);
  }
  z-index: 100;
  ul {
    @include min-width(xl) {
      border-left: 1px solid rgba($color: #000000, $alpha: 0.1);
    }
    list-style: none;
    padding: 12px;
    display: flex;
    margin: 0;
    gap: 8px;
    position: relative;
    li > a {
      color: rgb(var(--black));
      text-transform: uppercase;
      display: inline-flex;
      align-items: center;
      gap: 30px;
      padding: 5px 8px;
      font-size: 14px;
      @include min-width(xxl) {
        font-size: 20px;
        padding: 6px 12px;
      }
      font-weight: 500;
      transition-duration: 300ms;
      display: block;
      position: relative;
      min-width: max-content;
      border-bottom: 2px solid transparent;
      span {
        font-size: 16px;
      }
      &::after {
        transition-duration: 600ms;
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 0;
        height: 100%;
        background: rgb(var(--black));
        opacity: 0.15;
        &:dir(rtl) {
          left: auto;
          right: 0;
        }
      }
      &::before {
        transition-duration: 600ms;
        content: "";
        position: absolute;
        bottom: 0;
        right: 0;
        width: 0;
        height: 2px;
        background: rgb(var(--black));
        &:dir(rtl) {
          left: auto;
          right: 0;
        }
      }
      &:hover {
        &::after {
          animation: grow 600ms ease-in-out;
          width: 100%;
        }
        &::before {
          animation: grow 600ms ease-in-out;
          width: 100%;
        }
      }

      &.active {
        &::after {
          content: "";
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          animation: grow 600ms ease-in-out;
          height: 100%;
          background: rgb(var(--black));
          opacity: 0.15;
          &:dir(rtl) {
            left: auto;
            right: 0;
          }
        }
        &::before {
          transition-duration: 600ms;
          content: "";
          position: absolute;
          bottom: 0;
          right: 0;
          width: 100%;
          height: 2px;
          background: rgb(var(--black));
          &:dir(rtl) {
            left: auto;
            right: 0;
          }
        }
      }
    }
  }
  .contact {
    padding-top: 20px;
    &:dir(ltr) {
      padding-left: 34px;
    }
    &:dir(rtl) {
      padding-right: 34px;
    }
    display: flex;
    flex-direction: column;
    gap: 8px;
    a {
      font-size: 18px;
      color: rgb(var(--black));
    }
  }
}

.navigation-sticky {
  position: sticky;
  background-color: rgb(var(--primary));
  --height: 0;
  @media (max-width: 1200px) {
    &:dir(ltr) {
      transform: translateX(-120%);
      left: 0;
    }
    &:dir(rtl) {
      transform: translateX(120%);
      right: 0;
    }
    transition-duration: 500ms;
    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    padding: 20px;
    top: 0;
    bottom: 0;
    position: fixed;
    max-width: 300px;
    width: 100%;
    height: 100%;
    overflow-y: auto;
    img {
      margin-bottom: 20px;
    }
  }
  &.opened {
    @media (max-width: 1200px) {
      transform: translateX(0);
      position: fixed;
      ul {
        display: flex;
        flex-direction: column;
      }
      background-color: rgb(var(--primary));
    }
  }
  @include min-width(xl) {
    position: sticky;
    top: 0;
    display: flex;
    align-items: center;
    padding: 12px 0;
    justify-content: space-between;
    transform: translateX(0);
  }
  z-index: 100;
  ul {
    list-style: none;
    padding: 0;
    display: flex;
    margin: 0;
    gap: 8px;
    position: relative;
    li > a {
      color: rgb(var(--black));
      text-transform: uppercase;
      display: inline-flex;
      align-items: center;
      gap: 30px;
      padding: 5px 8px;
      font-size: 14px;
      @include min-width(xxl) {
        font-size: 20px;
        padding: 6px 12px;
      }
      font-weight: 500;
      transition-duration: 300ms;
      display: block;
      position: relative;
      min-width: max-content;
      border-bottom: 2px solid transparent;
      span {
        font-size: 16px;
      }
      &::after {
        transition-duration: 600ms;
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 0;
        height: 100%;
        background: rgb(var(--black));
        opacity: 0.15;
        &:dir(rtl) {
          left: auto;
          right: 0;
        }
      }
      &::before {
        transition-duration: 600ms;
        content: "";
        position: absolute;
        bottom: 0;
        right: 0;
        width: 0;
        height: 2px;
        background: rgb(var(--black));
        &:dir(rtl) {
          left: auto;
          right: 0;
        }
      }
      &:hover {
        &::after {
          animation: grow 600ms ease-in-out;
          width: 100%;
        }
        &::before {
          animation: grow 600ms ease-in-out;
          width: 100%;
        }
      }

      &.active {
        &::after {
          content: "";
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          animation: grow 600ms ease-in-out;
          height: 100%;
          background: rgb(var(--black));
          opacity: 0.15;
          &:dir(rtl) {
            left: auto;
            right: 0;
          }
        }
        &::before {
          transition-duration: 600ms;
          content: "";
          position: absolute;
          bottom: 0;
          right: 0;
          width: 100%;
          height: 2px;
          background: rgb(var(--black));
          &:dir(rtl) {
            left: auto;
            right: 0;
          }
        }
      }
    }
  }
}

.bg-shape {
  background-color: rgb(var(--primary));
  width: 100%;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1;
  .circles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .circles li {
    position: absolute;
    display: block;
    list-style: none;
    width: 20px;
    height: 20px;
    background: rgba(255, 255, 255, 0.3);
    animation: animate 25s linear infinite;
    bottom: -150px;
  }

  .circles li:nth-child(1) {
    left: 25%;
    width: 80px;
    height: 80px;
    animation-delay: 0s;
  }

  .circles li:nth-child(2) {
    left: 10%;
    width: 20px;
    height: 20px;
    animation-delay: 2s;
    animation-duration: 12s;
  }

  .circles li:nth-child(3) {
    left: 70%;
    width: 20px;
    height: 20px;
    animation-delay: 4s;
  }

  .circles li:nth-child(4) {
    left: 40%;
    width: 60px;
    height: 60px;
    animation-delay: 0s;
    animation-duration: 18s;
  }

  .circles li:nth-child(5) {
    left: 65%;
    width: 20px;
    height: 20px;
    animation-delay: 0s;
  }

  .circles li:nth-child(6) {
    left: 75%;
    width: 110px;
    height: 110px;
    animation-delay: 3s;
  }

  .circles li:nth-child(7) {
    left: 35%;
    width: 150px;
    height: 150px;
    animation-delay: 7s;
  }

  .circles li:nth-child(8) {
    left: 50%;
    width: 25px;
    height: 25px;
    animation-delay: 15s;
    animation-duration: 45s;
  }

  .circles li:nth-child(9) {
    left: 20%;
    width: 15px;
    height: 15px;
    animation-delay: 2s;
    animation-duration: 35s;
  }

  .circles li:nth-child(10) {
    left: 85%;
    width: 150px;
    height: 150px;
    animation-delay: 0s;
    animation-duration: 11s;
  }
}
.bg-gradiant {
  width: 100%;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1;
  opacity: 0.25;
  .out-top {
    animation: rotate 30s linear infinite;
    transform-origin: 13px 25px;
  }
  .in-top {
    animation: rotate 15s linear infinite;
    transform-origin: 13px 25px;
  }
  .out-bottom {
    animation: rotate 35s linear infinite;
    transform-origin: 84px 93px;
  }
  .in-bottom {
    animation: rotate 25s linear infinite;
    transform-origin: 84px 93px;
  }
}
.bg-traingle {
  position: fixed;
  background: cover;
  width: auto;
  height: auto;
  margin: 0;
  padding: 0;
  opacity: 0.25;
  z-index: -2;
}

@keyframes animate {
  0% {
    transform: translateY(0) rotate(0deg);
    opacity: 1;
    border-radius: 0;
  }

  100% {
    transform: translateY(-1000px) rotate(720deg);
    opacity: 0;
    border-radius: 50%;
  }
}

@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

#bg-snow {
  width: 100%;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1;
  .snowflake {
    --size: 1vw;
    width: var(--size);
    height: var(--size);
    background: rgba($color: #fff, $alpha: 0.3);
    border-radius: 50%;
    position: absolute;
    top: -5vh;
  }

  @keyframes snowfall {
    0% {
      transform: translate3d(var(--left-ini), 0, 0);
    }
    100% {
      transform: translate3d(var(--left-end), 110vh, 0);
    }
  }

  @for $i from 1 through 50 {
    .snowflake:nth-child(#{$i}) {
      --size: #{random(5) * 0.2}vw;
      --left-ini: #{random(20) - 10}vw;
      --left-end: #{random(20) - 10}vw;
      left: #{random(100)}vw;
      animation: snowfall #{5 + random(10)}s linear infinite;
      animation-delay: -#{random(10)}s;
    }
  }

  /* added small blur every 6 snowflakes*/
  .snowflake:nth-child(6n) {
    filter: blur(1px);
  }
}

#background-canvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
}

#bg-video {
  width: 100%;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1;
  video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0.1;
  }
}
.header-topbar {
  padding: 14px 0;
  width: 100%;
  z-index: 10;
  left: 0;
  right: 0;
  background-color: rgb(var(--primary));
  position: fixed;
  img {
    max-width: 100%;
  }
  .nav-icon {
    width: 30px;
    height: 16px;
    z-index: 15;
    padding: 2px;
    top: -3px;
    position: relative;
    transform: rotate(0deg);
    transition: 0.5s ease-in-out;
    cursor: pointer;
    span {
      display: block;
      position: absolute;
      height: 2px;
      width: 100%;
      background: rgb(var(--black));
      opacity: 1;
      left: 0;
      transform: rotate(0deg);
      transition: 0.25s ease-in-out;
    }
  }
  .nav-icon span:nth-child(1) {
    top: 0px;
  }

  .nav-icon span:nth-child(2) {
    top: 10px;
  }

  .nav-icon span:nth-child(3) {
    top: 20px;
  }

  .nav-icon.open span:nth-child(1) {
    top: 10px;
    transform: rotate(135deg);
    background-color: rgb(var(--white));
  }

  .nav-icon.open span:nth-child(2) {
    opacity: 0;
    left: -60px;
  }

  .nav-icon.open span:nth-child(3) {
    top: 10px;
    background-color: rgb(var(--white));
    transform: rotate(-135deg);
  }
}

.demos {
  max-width: 450px;
  transform: translateX(100%);
  position: fixed;
  right: 0;
  top: 0;
  z-index: 120;
  height: 100vh;
  transition-duration: 400ms;
  &.opened {
    transform: translateX(0);
  }
  .demo-btn {
    padding: 12px 24px;
    border: none;
    position: fixed;
    z-index: 120;
    background-color: white;
    transform: translateX(-99%);
    left: 0;
    top: 38%;
  }
  .demo-list {
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow-y: auto;
    gap: 20px;
    background-color: $white;
    padding: 20px;
    a {
      display: block;
      background-color: rgba($color: #ffdb67, $alpha: 0.15);
      padding: 12px;
      border-radius: 12px;
      transition-duration: 200ms;
      &:hover {
        background-color: rgba($color: #ffdb67, $alpha: 0.5);
      }
      img {
        max-width: 100%;
        height: auto;
        border-radius: 12px;
      }
      p {
        text-align: center;
        margin-top: 12px;
      }
    }
  }
}

// modal
.modal-dialog {
  overflow-y: auto;
}
.modal-content {
  background-color: rgba(var(--primary), 0.8);
  .modal-body {
    background-color: rgb(var(--primary));
    max-width: 1296px;
    height: 100%;
    border-radius: 12px;
    margin: 30px auto;
    position: relative;
    padding: 16px;
    @include min-width(md) {
      padding: 32px;
    }
    @include min-width(xl) {
      padding: 48px;
      padding-top: 120px;
    }
    .btn-close {
      position: absolute;
      top: 30px;
      right: 30px;
      width: 24px;
      height: 24px;
      @include min-width(xl) {
        right: 48px;
        width: 36px;
        height: 36px;
      }
      border-radius: 50%;
      color: rgb(var(--white));
      background-color: rgb(var(--black));
      display: flex;
      align-items: center;
      justify-content: center;
      transition-duration: 0.3s;
      &:hover {
        transform: rotate(180deg);
      }
    }
    ul {
      list-style: none;
      display: flex;
      flex-direction: column;
      margin-bottom: 40px;
      &.bullet {
        list-style: disc;
      }
      @include min-width(xl) {
        margin-bottom: 60px;
      }
      gap: 12px;
      &.list-plus {
        li {
          position: relative;
          &::before {
            content: "+"; /* Unicode for plus sign */
            position: absolute;
            left: -20px;
            top: 2px;
            color: #000; /* Change color of the plus icon */
            font-size: 20px; /* Size of the plus icon */
            line-height: 1; /* Align vertically with text */
          }
        }
      }
    }
    .outcome {
      border-bottom: 1px solid rgb(var(--black));
      padding-bottom: 40px;
      margin-bottom: 40px;
      @include min-width(xl) {
        padding-bottom: 60px;
        margin-bottom: 60px;
      }
    }
  }
}

.right-bar {
  padding: 20px;
  @include min-width(xl) {
    padding: 32px;
    gap: 24px;
  }
  border-radius: 12px;
  border: 1px solid rgba(var(--black), 0.1);
  background-color: rgba(var(--white), 0.1);
  display: flex;
  flex-direction: column;
  gap: 16px;
  h6 {
    font-size: 18px;
  }
}

.rotate-90 {
  transform: rotate(-90deg);
}

.topics-inner {
  padding: 20px;
  border-radius: 20px;
  display: flex;
  justify-content: center;
  gap: 20px;
  flex-wrap: wrap;
  margin-bottom: 40px;
  border: 1px solid rgba(var(--black), 0.1);
  @include min-width(xl) {
    margin-bottom: 60px;
    padding: 40px 60px;
    gap: 40px;
  }
  .topic-box {
    padding: 16px;
    border-radius: 12px;
    width: 196px;
    border: 1px solid rgba(var(--black), 0.1);
    @include min-width(xl) {
      padding: 24px;
    }
    display: flex;
    flex-direction: column;
    gap: 20px;
    align-items: center;
    background-color: rgba(var(--white), 0.1);
    transition-duration: 300ms;
    &:hover {
      background-color: rgba(var(--black), 0.05);
    }
    .icon {
      width: 64px;
      height: 64px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      background-color: rgb(var(--black));
      i {
        font-size: 2rem;
      }
      span {
        position: absolute;
        top: 0;
        right: -13px;
        display: flex;
        transform: translate(-50%, -50%);
        background-color: rgb(var(--primary));
        font-size: 14px;
        width: 24px;
        height: 24px;
        align-items: center;
        border-radius: 50%;
        justify-content: center;
      }
    }
    p {
      font-size: 20px;
      font-weight: 500;
    }
  }
}

.topic-index {
  padding: 16px;
  top: 80px;
  border-radius: 12px;
  background-color: rgba(var(--white), 0.1);
  border: 1px solid rgba(var(--black), 0.1);
  @include min-width(xl) {
    padding: 20px;
  }
  .blog-topic {
    border: 1px solid rgba(var(--black), 0.1);
    padding: 12px;
    cursor: pointer;
    border-radius: 12px;
    transition-duration: 300ms;
    &:hover {
      background-color: rgba(var(--black), 0.05);
    }
    .title {
      display: flex;
      align-items: center;
      gap: 12px;
      span {
        width: 28px;
        height: 28px;
        display: flex;
        border-radius: 4px;
        align-items: center;
        justify-content: center;
        background-color: rgb(var(--black));
        color: rgb(var(--white));
      }
      p {
        font-size: 18px;
      }
    }
    &.active {
      .list {
        max-height: 500px;
      }
    }
    .list {
      .list-inner {
        display: flex;
        border-left: 1px solid rgba(var(--black), 0.1);
        list-style-type: none;
        padding-left: 20px;
        margin-top: 20px;
        margin-left: 12px;
        flex-direction: column;
        gap: 8px;
        li a {
          font-size: 14px;
        }
      }
    }
  }
}

.pagination {
  margin-top: 40px;
  margin-bottom: 60px;
  @include min-width(xl) {
    margin-top: 50px;
    margin-bottom: 100px;
  }
  display: flex;
  justify-content: center;
  gap: 12px;
  a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: rgb(var(--white));
    color: #000;
    font-size: 18px;
    font-weight: 500;
    transition-duration: 300ms;
    border: 1px solid rgba(0, 0, 0, 0.1);
    &:hover {
      background-color: rgb(var(--black));
      color: #fff;
    }
  }
}

.blog-details {
  padding-bottom: 60px;
  @include min-width(xl) {
    padding-bottom: 100px;
  }
}

.details-left {
  position: sticky;
  top: 80px;
  display: flex;
  flex-direction: column;
  gap: 20px;
  .info-box {
    border-radius: 12px;
    padding: 16px;
    @include min-width(xxl) {
      padding: 24px;
    }
    background-color: rgba(var(--white), 0.1);
    border: 1px solid rgba(var(--black), 0.1);
    h4 {
      padding-bottom: 16px;
      margin-bottom: 16px;
      border-bottom: 1px solid rgba(var(--black), 0.6);
    }
  }
}
.table-of-content {
  padding-left: 16px;
  border-left: 1px solid rgba(var(--black), 0.2);
  a.active {
    position: relative;
    font-weight: 500;
    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: -17px;
      width: 2px;
      height: 100%;
      background-color: rgb(var(--black));
    }
  }
}
.details-container {
  max-width: 856px;
  margin: 0 auto;
}
.details-content {
  margin-top: 80px;
  padding: 12px;
  border-radius: 12px;
  background-color: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(var(--black), 0.15);
  @include min-width(xl) {
    padding: 24px;
  }
  @include min-width(xxl) {
    padding: 40px;
  }
}
.blog-video {
  .youtube {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80px;
    height: 80px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    cursor: pointer;
    justify-content: center;
    background-color: rgb(var(--white));
  }
}

.quote {
  padding: 32px 0;
  margin-bottom: 32px;
  border-top: 1px solid rgba(var(--black), 0.6);
  border-bottom: 1px solid rgba(var(--black), 0.6);
  p {
    font-size: 24px;
    font-weight: 500;
  }
}
.share {
  border-top: 1px solid rgba(var(--black), 0.3);
  border-bottom: 1px solid rgba(var(--black), 0.3);
  form {
    border-radius: 4px;
    padding: 4px;
    display: flex;
    border: 1px solid rgba(var(--black), 0.2);
    justify-content: space-between;
    input {
      width: 100%;
      background-color: transparent;
      border: none;
      padding: 10px;
      &:focus {
        outline: none;
      }
    }
    button {
      flex-shrink: 0;
      background-color: rgb(var(--black));
      padding: 12px 20px;
      border-radius: 4px;
      color: rgb(var(--white));
      font-weight: 500;
      font-size: 20px;
    }
  }
}

.next-prev {
  margin-top: 40px;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  gap: 32px;
  @include min-width(xl) {
    gap: 60px;
  }
  .divider {
    height: 66px;
    width: 1px;
    background-color: rgba(var(--black), 0.2);
  }
  .article-card {
    display: flex;
    align-items: center;
    max-width: 360px;
    gap: 16px;
    padding: 20px 20px 20px 0;
    p {
      opacity: 0.6;
    }
    &.right {
      padding: 20px 0 20px 20px;
      button {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        border-top-left-radius: 50%;
        border-bottom-left-radius: 50%;
      }
    }
    transition-duration: 300ms;
    &:hover {
      background-color: rgb(var(--black));
      p,
      h5 {
        color: rgb(var(--white));
      }
    }
    border-radius: 12px;
    border: 1px solid rgba(var(--black), 0.15);
    background-color: rgba(var(--white), 0.1);
    button {
      height: 62px;
      width: 62px;
      border: none;
      font-size: 1.5rem;
      display: flex;
      flex-shrink: 0;
      align-items: center;
      justify-content: center;
      border-top-right-radius: 50%;
      border-bottom-right-radius: 50%;
    }
  }
}

// blogs
.blog-card {
  display: flex;
  flex-direction: column;
  gap: 20px;
  padding: 12px;
  border-radius: 12px;
  background-color: rgba(var(--white), 0.1);
  border: 1px solid rgba(var(--black), 0.1);
  align-items: center;
  transition-duration: 300ms;
  .img-wrapper {
    flex-shrink: 0;
  }
  img {
    transition-duration: 300ms;
  }
  &:hover {
    background-color: rgba(var(--black), 0.03);
    img {
      transform: scale(1.1);
    }
  }
  @media (max-width: 768px) {
    img {
      width: 100%;
    }
  }
  @include min-width(md) {
    flex-direction: row;
  }
  @include min-width(xl) {
    gap: 32px;
  }
  .details {
    margin-bottom: 20px;
    padding-bottom: 20px;
    border-bottom: 1px solid rgba(var(--black), 0.2);
  }
}
// newsletter section
.newsletter {
  background-color: rgba(var(--white), 0.1);
  padding: 60px 0;
  .content {
    max-width: 856px;
    margin: 0 auto;
    form {
      display: flex;
      gap: 12px;
      input {
        width: 100%;
        padding: 12px;
        background-color: transparent;
        border-radius: 4px;
        border: 1px solid rgba(var(--black), 0.2);
        &:focus {
          outline: none;
        }
      }
      button {
        background-color: rgb(var(--black));
        color: rgb(var(--white));
        padding: 12px 20px;
        border-radius: 4px;
        border: none;
        flex-shrink: 0;
      }
    }
    input[type="checkbox"] {
      accent-color: rgb(var(--black));
      transform: scale(1.3);
    }
  }
}

footer {
  background-color: rgba(var(--black), 0.06);
  padding: 32px 0;
  a {
    text-decoration: underline;
  }
}
.underlined {
  text-decoration: underline;
}
.header-blog {
  padding: 14px 0;
  width: 100%;
  z-index: 10;
  left: 0;
  right: 0;
  background-color: rgb(var(--primary));
  position: fixed;
  img {
    max-width: 100%;
  }
}
.connect {
  border: 1px solid rgba(var(--black), 0.2);
  padding: 4px;
  display: flex;
  margin-bottom: 40px;
  border-radius: 4px;
  gap: 12px;
  input {
    width: 100%;
    padding: 12px;
    background-color: transparent;
    border-radius: 4px;
    border: none;
    &:focus {
      outline: none;
    }
  }
  button {
    background-color: rgb(var(--black));
    color: rgb(var(--white));
    padding: 12px 20px;
    border-radius: 4px;
    border: none;
    flex-shrink: 0;
  }
}


