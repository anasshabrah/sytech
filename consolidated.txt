--- C:\Users\hanos\sytech\declarations.d.ts ---
// declarations.d.ts
declare module 'react-outside-click-handler' {
  import * as React from 'react';

  interface OutsideClickHandlerProps {
    onOutsideClick: (event: MouseEvent | TouchEvent) => void;
    disabled?: boolean;
    children: React.ReactNode;
  }

  export default class OutsideClickHandler extends React.Component<OutsideClickHandlerProps> {}
}

declare module 'react-modal-video' {
  import * as React from 'react';

  interface ReactModalVideoProps {
    channel?: 'youtube' | 'vimeo' | 'custom';
    isOpen: boolean;
    videoId: string;
    autoplay?: boolean;
    onClose: () => void;
    // Add any additional props you use
  }

  export default class ModalVideo extends React.Component<ReactModalVideoProps> {}
}


--- C:\Users\hanos\sytech\next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


--- C:\Users\hanos\sytech\next.config.mjs ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Remove or comment out output: 'export'
  // output: "export",
  trailingSlash: true,
  images: {
    unoptimized: true,
  },
};

export default nextConfig;


--- C:\Users\hanos\sytech\package.json ---
{
  "name": "SyTech",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "@emailjs/browser": "^4.4.1",
    "@gsap/react": "^2.1.1",
    "@popperjs/core": "^2.11.8",
    "apexcharts": "^4.3.0",
    "bootstrap": "^5.3.3",
    "core-js": "^3.40.0",
    "glob": "^11.0.0",
    "gsap": "^3.12.5",
    "lru-cache": "^11.0.2",
    "next": "15.1.4",
    "phosphor-icons": "^1.4.2",
    "postmark": "^4.0.5",
    "react": "^18.2.0",
    "react-animate-height": "^3.2.3",
    "react-apexcharts": "^1.7.0",
    "react-dom": "^18.2.0",
    "react-intersection-observer": "^9.14.1",
    "react-modal-video": "^2.0.2",
    "sharp": "^0.33.5",
    "shuffle-letters": "^1.1.0",
    "split-type": "^0.3.4",
    "swiper": "^11.2.0",
    "typewriter-effect": "^2.21.0"
  },
  "devDependencies": {
    "@fullhuman/postcss-purgecss": "^6.0.0",
    "@types/bootstrap": "^5.2.10",
    "@types/node": "22.10.5",
    "@types/react": "^19.0.4",
    "@types/react-dom": "^19.0.2",
    "@types/react-modal-video": "^1.2.3",
    "cssnano": "^7.0.6",
    "postcss": "^8.4.49",
    "postcss-import": "^16.1.0",
    "postcss-preset-env": "^10.1.3",
    "sass": "^1.83.1",
    "typescript": "5.7.3"
  }
}


--- C:\Users\hanos\sytech\postcss.config.js ---
// postcss.config.js

const purgecss = require('@fullhuman/postcss-purgecss');

module.exports = {
  plugins: {
    'postcss-import': {}, // Allows using @import in CSS
    'postcss-preset-env': { // Enables modern CSS features
      stage: 3,
      features: {
        'nesting-rules': true,
      },
    },
    ...(process.env.NODE_ENV === 'production' ? { // Only include these plugins in production
      '@fullhuman/postcss-purgecss': { // Removes unused CSS
        content: [
          './app/**/*.{js,jsx,ts,tsx}',
          './components/**/*.{js,jsx,ts,tsx}',
          './pages/**/*.{js,jsx,ts,tsx}',
        ],
        defaultExtractor: (content) => content.match(/[\w-/:]+(?<!:)/g) || [],
        safelist: { // Prevents specific classes from being purged
          standard: [
            'active',
            'opened',
            /^nav-/,
            /^btn-/,
            /^text-/,
            /^bg-/,
            /^swiper/,
          ],
        },
      },
      'cssnano': { // Minifies CSS
        preset: 'default',
      },
    } : {}),
  },
};


--- C:\Users\hanos\sytech\shuffle.d.ts ---
declare module "shuffle-letters";


--- C:\Users\hanos\sytech\tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


--- C:\Users\hanos\sytech\app\layout.tsx ---
// app/layout.tsx

import type { Metadata } from "next";
import Bootstrap from "@/components/Bootstrap";
import GSAPAnimations from "@/components/GSAPAnimations";
import "@/public/scss/styles.scss";

// Separate viewport export
export const viewport = {
  width: "device-width",
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
};

// Global Metadata (excluding viewport)
export const metadata: Metadata = {
  // Add any global metadata here if needed
  // For example, global Open Graph tags
  openGraph: {
    type: "website",
    locale: "ar_SY",
    url: "https://syriatech.co",
    siteName: "سيرياتك",
  },
};

type LayoutType = {
  children: React.ReactNode;
};

export default function RootLayout({ children }: LayoutType) {
  return (
    <html lang="ar" dir="rtl">
      <body className="font-readex" suppressHydrationWarning>
        <Bootstrap>
          <GSAPAnimations />
          {children}
        </Bootstrap>
      </body>
    </html>
  );
}


--- C:\Users\hanos\sytech\app\page.tsx ---
// app/page.tsx

import type { Metadata } from "next";
import HomeContent from "@/components/HomeContent";

// Page-Specific Metadata
export const metadata: Metadata = {
  title: "سيرياتك - مسرعة أعمال سورية مساهمة خاصة",
  description:
    "نجمع أصحاب الطموح والمشاريع الناشئة مع المستثمرين المساهمين في سيرياتك المساهمة الخاصة",
  keywords: "مسرعة أعمال, استثمار, مشاريع ناشئة, سيرياتك",
  authors: [{ name: "سيرياتيك" }],
  openGraph: {
    type: "website",
    locale: "ar_SY",
    url: "https://syriatech.co",
    title: "سيرياتك - مسرعة أعمال سورية مساهمة خاصة",
    description:
      "نجمع أصحاب الطموح والمشاريع الناشئة مع المستثمرين المساهمين في سيرياتك المساهمة الخاصة",
    siteName: "سيرياتك",
    images: [
      {
        url: "https://syriatech.co/images/og-image.jpg",
        width: 1200,
        height: 630,
        alt: "سيرياتك - مسرعة أعمال سورية",
      },
    ],
  },
  icons: {
    icon: "/favicon.ico",
    shortcut: "/icon.png",
    apple: "/icon.png",
  },
  robots: {
    index: true,
    follow: true,
    nocache: false,
    googleBot: {
      index: true,
      follow: true,
      noimageindex: false,
      "max-video-preview": -1,
      "max-snippet": -1,
      "max-image-preview": "large",
    },
  },
};

export default function HomePage() {
  // Structured Data for SEO (JSON-LD)
  const structuredData = {
    "@context": "https://schema.org",
    "@type": "Organization",
    "name": "سيرياتك",
    "url": "https://syriatech.co",
    "logo": "https://syriatech.co/logo.png",
    "description":
      "نجمع أصحاب الطموح والمشاريع الناشئة مع المستثمرين المساهمين في سيرياتك المساهمة الخاصة",
    "sameAs": [
      "https://www.facebook.com/syriatech",
      "https://twitter.com/syriatech",
      "https://www.linkedin.com/company/syriatech",
    ],
    "contactPoint": [
      {
        "@type": "ContactPoint",
        "telephone": "+90-5550400545",
        "contactType": "customer service",
        "areaServed": "SY",
      },
    ],
  };

  return (
    <>
      <HomeContent structuredData={structuredData} />
    </>
  );
}


--- C:\Users\hanos\sytech\app\types.ts ---
// app/types.ts
import { StaticImageData } from 'next/image';

export interface TableOfContentsItem {
  id: string;
  title: string;
}

export interface SubmitInvestorResponse {
  success: boolean;
  message?: string;
}

export interface Project {
  id: string; // Unique identifier for dynamic routing
  name: string;
  logo: string; // Path to the project logo image
  shortDescription: string;

--- C:\Users\hanos\sytech\app\api\submit-investor\route.ts ---
// app/api/submit-investor/route.ts

import { NextRequest, NextResponse } from "next/server";
import { ServerClient } from "postmark";
import { SubmitInvestorResponse } from "@/app/types";

// Define the runtime environment if necessary
export const runtime = "nodejs";

// Interface for the expected form fields
interface InvestorFormFields {
  investorName: string;
  investorEmail: string;
  investorPhone: string;
  investmentAmount: string;
}

// Sanitization function to prevent XSS attacks
const sanitize = (input: string): string => {
  return input
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
};

// Main POST handler
export async function POST(
  req: NextRequest
): Promise<NextResponse<SubmitInvestorResponse>> {
  console.log("Received POST request to /api/submit-investor");

  try {
    // Extract and log Content-Type header
    const contentType = req.headers.get("Content-Type") || "";
    console.log(`Content-Type header: ${contentType}`);

    // Validate Content-Type
    if (!contentType.includes("application/json")) {
      console.warn("Invalid Content-Type received");
      return NextResponse.json(
        { success: false, message: "Invalid Content-Type. Expected application/json." },
        { status: 400 }
      );
    }

    // Attempt to parse JSON body
    let body: any;
    try {
      body = await req.json();
      console.log("Request body parsed successfully");
    } catch (parseError) {
      console.error("Error parsing JSON body:", parseError);
      return NextResponse.json(
        { success: false, message: "Invalid JSON format." },
        { status: 400 }
      );
    }

    console.log("Original request body:", body);

    // Sanitize and assign form fields
    const investorFields: InvestorFormFields = {
      investorName: sanitize(body.investorName || ""),
      investorEmail: sanitize(body.investorEmail || ""),
      investorPhone: sanitize(body.investorPhone || ""),
      investmentAmount: sanitize(body.investmentAmount || ""),
    };

    console.log("Sanitized investor fields:", investorFields);

    const { investorName, investorEmail, investorPhone, investmentAmount } = investorFields;

    // Validate required fields
    if (!investorName || !investorEmail || !investorPhone || !investmentAmount) {
      console.warn("Validation failed: Missing required fields");
      return NextResponse.json(
        { success: false, message: "يرجى ملء جميع الحقول المطلوبة." },
        { status: 400 }
      );
    }
    console.log("All required fields are present");

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(investorEmail)) {
      console.warn("Validation failed: Invalid email format");
      return NextResponse.json(
        { success: false, message: "البريد الإلكتروني غير صالح." },
        { status: 400 }
      );
    }
    console.log("Email format is valid");

    // Validate phone number format (7-14 digits, optional +)
    const phoneRegex = /^\+?\d{7,14}$/;
    if (!phoneRegex.test(investorPhone)) {
      console.warn("Validation failed: Invalid phone number format");
      return NextResponse.json(
        {
          success: false,
          message: "رقم الهاتف غير صالح. يجب أن يتألف من 7-14 رقم، مع السماح بعلامة + اختيارياً.",
        },
        { status: 400 }
      );
    }
    console.log("Phone number format is valid");

    // Validate investment amount (numeric and minimum value)
    const investmentNum = parseFloat(investmentAmount);
    if (isNaN(investmentNum) || investmentNum < 100) {
      console.warn("Validation failed: Invalid investment amount");
      return NextResponse.json(
        { success: false, message: "مبلغ الاستثمار غير صالح (الحد الأدنى 100 دولار)." },
        { status: 400 }
      );
    }
    console.log(`Investment amount is valid: ${investmentNum}`);

    // Retrieve Postmark server token from environment variables
    const postmarkToken = process.env.POSTMARK_SERVER_TOKEN;
    if (!postmarkToken) {
      console.error("Postmark server token is missing in environment variables");
      return NextResponse.json(
        { success: false, message: "Internal Server Error." },
        { status: 500 }
      );
    }
    console.log("Postmark server token retrieved successfully");

    // Conditionally log Postmark token (only in non-production)
    if (process.env.NODE_ENV !== "production") {
      console.log("Postmark Token:", postmarkToken);
    }

    // Initialize Postmark client
    const client = new ServerClient(postmarkToken);
    console.log("Postmark client initialized");

    // Prepare email content with UTF-8 support
    const emailContent = {
      From: "info@syriatech.co", // Replace with your verified Postmark sender
      To: "habrahllc@gmail.com", // Replace with your recipient email
      Subject: "تقديم مستثمر جديد",
      HtmlBody: `
        <p><strong>اسم المستثمر:</strong> ${investorName}</p>
        <p><strong>البريد الإلكتروني:</strong> ${investorEmail}</p>
        <p><strong>رقم الهاتف:</strong> ${investorPhone}</p>
        <p><strong>مبلغ الاستثمار المتوقع:</strong> ${investmentAmount}</p>
      `,
      TextBody: `
        اسم المستثمر: ${investorName}
        البريد الإلكتروني: ${investorEmail}
        رقم الهاتف: ${investorPhone}
        مبلغ الاستثمار المتوقع: ${investmentAmount}
      `,
      MessageStream: "outbound",
    };

    console.log("Email content prepared:", {
      From: emailContent.From,
      To: emailContent.To,
      Subject: emailContent.Subject,
      // Omitting HtmlBody and TextBody for security
    });

    // Send email via Postmark
    console.log("Sending email via Postmark");
    const sendResult = await client.sendEmail(emailContent);
    console.log("Email sent result:", sendResult);

    if (sendResult.Message === "OK") {
      console.log("Email sent successfully");
      return NextResponse.json({ success: true }, { status: 200 });
    } else {
      console.error("Failed to send email via Postmark:", sendResult.Message);
      return NextResponse.json(
        { success: false, message: "فشل في إرسال البريد الإلكتروني." },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("An unexpected error occurred:", error);
    return NextResponse.json(
      { success: false, message: "حدث خطأ أثناء معالجة الطلب." },
      { status: 500 }
    );
  }
}


--- C:\Users\hanos\sytech\app\api\submit-project\route.ts ---
// app/api/submit-project/route.ts

import { NextRequest, NextResponse } from "next/server";
import { ServerClient } from "postmark";

interface SubmitProjectResponse {
  success: boolean;
  message?: string;
}

export async function POST(
  req: NextRequest
): Promise<NextResponse<SubmitProjectResponse>> {
  try {
    const formData = await req.formData();

    const fullName = formData.get("fullName")?.toString().trim() || "";
    const email = formData.get("email")?.toString().trim() || "";
    const phone = formData.get("phone")?.toString().trim() || "";
    const linkedin = formData.get("linkedin")?.toString().trim() || "";
    const website = formData.get("website")?.toString().trim() || "";
    const pitchDeck = formData.get("pitchDeck") as File | null;

    // Basic required fields check
    if (!fullName || !email || !phone || !linkedin || !website || !pitchDeck) {
      return NextResponse.json(
        { success: false, message: "يرجى ملء جميع الحقول المطلوبة." },
        { status: 400 }
      );
    }

    // Email format check
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { success: false, message: "البريد الإلكتروني غير صالح." },
        { status: 400 }
      );
    }

    // Phone format check (7-14 digits, optional +)
    const phoneRegex = /^\+?\d{7,14}$/;
    if (!phoneRegex.test(phone)) {
      return NextResponse.json(
        {
          success: false,
          message:
            "رقم الهاتف غير صالح. يجب أن يتألف من 7-14 رقم، مع السماح بعلامة + اختيارياً.",
        },
        { status: 400 }
      );
    }

    // Allowed file types and size checks
    if (pitchDeck.type !== "application/pdf") {
      return NextResponse.json(
        {
          success: false,
          message: "نوع الملف غير مسموح به. يرجى تحميل ملف PDF.",
        },
        { status: 400 }
      );
    }

    const maxFileSize = 10 * 1024 * 1024; // 10MB
    if (pitchDeck.size > maxFileSize) {
      return NextResponse.json(
        {
          success: false,
          message: "حجم الملف كبير جداً. الحد الأقصى هو 10MB.",
        },
        { status: 400 }
      );
    }

    // Convert file to Base64 so we can attach it to an email
    const arrayBuffer = await pitchDeck.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);
    const base64File = buffer.toString("base64");

    const postmarkToken = process.env.POSTMARK_SERVER_TOKEN;
    if (!postmarkToken) {
      console.error(
        "POSTMARK_SERVER_TOKEN is not defined in environment variables."
      );
      return NextResponse.json(
        { success: false, message: "Internal Server Error." },
        { status: 500 }
      );
    }

    const client = new ServerClient(postmarkToken);

    const sanitize = (input: string): string => {
      return input
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    };

    const sendResult = await client.sendEmail({
      From: "info@syriatech.co",
      To: "habrahllc@gmail.com",
      Subject: "تقديم عرض مشروع جديد",
      HtmlBody: `
        <p><strong>الاسم الكامل:</strong> ${sanitize(fullName)}</p>
        <p><strong>البريد الإلكتروني:</strong> ${sanitize(email)}</p>
        <p><strong>رقم الهاتف:</strong> ${sanitize(phone)}</p>
        <p><strong>ملف لينكدإن:</strong> <a href="${sanitize(
          linkedin
        )}">${sanitize(linkedin)}</a></p>
        <p><strong>الموقع الإلكتروني أو موقع الشركة:</strong> <a href="${sanitize(
          website
        )}">${sanitize(website)}</a></p>
      `,
      TextBody: `
        الاسم الكامل: ${sanitize(fullName)}
        البريد الإلكتروني: ${sanitize(email)}
        رقم الهاتف: ${sanitize(phone)}
        ملف لينكدإن: ${sanitize(linkedin)}
        الموقع الإلكتروني أو موقع الشركة: ${sanitize(website)}
      `,
      Attachments: [
        {
          Name: pitchDeck.name || "pitch-deck.pdf",
          Content: base64File,
          ContentType: pitchDeck.type || "application/pdf",
          ContentID: "pitch-deck",
        },
      ],
    });

    if (sendResult.Message === "OK") {
      return NextResponse.json({ success: true });
    } else {
      console.error("Postmark send email failed:", sendResult.Message);
      return NextResponse.json(
        { success: false, message: "فشل في إرسال البريد الإلكتروني." },
        { status: 500 }
      );
    }
  } catch (error: any) {
    console.error("Error in submit-project API:", error);
    return NextResponse.json(
      { success: false, message: "حدث خطأ أثناء معالجة الطلب." },
      { status: 500 }
    );
  }
}


--- C:\Users\hanos\sytech\app\data\projectDetailsData.ts ---
// app/data/projectDetailsData.ts

export interface ProjectDetail {
  id: string;
  name: string;
  logo: string;
  shortDescription: string;
  fullDescription: string;
  sections: ProjectSection[];
  team: TeamMember[];
}

export interface ProjectSection {
  title: string;
  content: string | string[]; // Can be a string or an array of strings for lists
}

export interface TeamMember {
  name: string;
  role: string;
  photo?: string; // Optional: URL to the team member's photo
}

export const projectDetails: ProjectDetail[] = [
  {
    id: "saiks", // Matches the updated project ID in projectsData.ts
    name: "سايكس",
    logo: "/images/projects/syex-logo.png", // Updated to match projectsData.ts
    shortDescription:
      "منصة إلكترونية تربط المنتجين المحليين في سوريا بالمشتريين الدوليين، مع توفير أدوات لإدارة الأعمال والتواصل الفعّال.",
    fullDescription:
      "منصة سايكس الإلكترونية تهدف إلى تعزيز التجارة الإلكترونية في سوريا من خلال توفير سوق رقمي يُمكّن المنتجين المحليين من عرض منتجاتهم والتواصل مع المشترين الدوليين بشكل آمن وفعّال. تقدم المنصة أدوات متكاملة لإدارة الطلبات، المخزون، والدفع الإلكتروني، مما يسهل عملية البيع والشراء بالجملة.",
    sections: [
      {
        title: "1. ملخص المشروع",
        content:
          "الهدف من المشروع هو إنشاء منصة إلكترونية تُمكّن المنتجين المحليين في سوريا من عرض منتجاتهم وتوفير قناة آمنة وفعالة للبيع بالجملة إلى خارج سوريا. ستكون المنصة بمثابة سوق رقمي يربط البائعين والمشترين، مع توفير أدوات لإدارة الأعمال، مثل الدفع الإلكتروني، الشحن، والتواصل بين الأطراف.",
      },
      {
        title: "2. رؤية المشروع",
        content: [
          "تمكين المنتجين المحليين في سوريا من الوصول إلى أسواق جديدة.",
          "تعزيز التجارة الإلكترونية كوسيلة لتحفيز الاقتصاد السوري.",
          "تقديم حلول تقنية تسهل التجارة بين الشركات (B2B).",
        ],
      },
      {
        title: "3. القيم الأساسية",
        content: [
          "الشفافية: ضمان وضوح العمليات التجارية وشروط الاستخدام.",
          "الأمان: توفير نظام دفع وشحن آمن.",
          "الدعم المحلي: التركيز على تمكين المنتجات السورية.",
          "سهولة الاستخدام: تصميم منصة سهلة التنقل والاستخدام.",
        ],
      },
      {
        title: "4. شرائح العملاء",
        content: [
          "المنتجون المحليون: الشركات والمصانع الصغيرة والمتوسطة المحلية.",
          "المشترون الدوليون: مستوردون من دول أخرى يبحثون عن منتجات سورية بأسعار تنافسية.",
        ],
      },
      {
        title: "5. القيمة المقترحة",
        content: [
          "للبائعين:",
          "• الوصول إلى جمهور أوسع خارج سوريا.",
          "• أدوات لإدارة الطلبات، المخزون، والدفع.",
          "• خدمة تسويقية مجانية أو مدفوعة لتعزيز مبيعاتهم.",
          "",
          "للمشترين:",
          "• مجموعة واسعة من المنتجات المحلية بأسعار تنافسية.",
          "• ضمان الجودة والشفافية في التعاملات.",
          "• خيارات شحن مرنة وآمنة.",
        ],
      },
      {
        title: "6. قنوات التوزيع",
        content: [
          "المنصة الإلكترونية: موقع ويب وتطبيق جوال متاحين باللغتين العربية والإنجليزية.",
          "وسائل التواصل الاجتماعي: حملات تسويقية على فيسبوك، إنستغرام، ولينكدإن.",
          "البريد الإلكتروني: رسائل إخبارية دورية تحتوي على عروض ومنتجات جديدة.",
          "الشراكات: التعاون مع غرف التجارة المحلية والمنظمات غير الحكومية لدعم المنتجين.",
        ],
      },
      {
        title: "7. العلاقات مع العملاء",
        content: [
          "دعم العملاء: فريق متخصص لحل المشكلات الفنية والتجارية والرد على استفساراتهم.",
          "التقييمات والمراجعات: نظام لتقييم البائعين والمشترين لضمان الثقة.",
        ],
      },
      {
        title: "8. الإيرادات",
        content: [
          "عمولات البيع: نسبة مئوية من كل عملية بيع تتم عبر المنصة.",
          "الإعلانات: مساحات إعلانية مدفوعة للبائعين الراغبين في زيادة ظهورهم.",
          "خدمات إضافية: رسوم على الخدمات الإضافية مثل الشحن السريع أو التسويق الرقمي.",
        ],
      },
      {
        title: "9. البنية التحتية والتكنولوجيا",
        content: [
          "تطوير المنصة:",
          "• تصميم واجهة مستخدم (UI) وتجربة مستخدم (UX) بسيطة وجذابة.",
          "• بناء نظام إدارة محتوى (CMS) لتسهيل إدارة المنتجات.",
          "• دمج بوابة دفع إلكتروني آمنة تدعم العملات المحلية والدولية.",
          "",
          "البنية التحتية التقنية:",
          "• خوادم محلية ودولية لضمان استقرار المنصة.",
          "• نظام أمان قوي لحماية بيانات المستخدمين.",
          "• دعم فني متواصل لحل أي مشكلات تقنية.",
        ],
      },
      {
        title: "10. الشركاء الرئيسيون",
        content: [
          "شركات الشحن: التعاون مع شركات الشحن الدولية لتوفير خدمات توصيل فعالة.",
          "بنوك ومؤسسات مالية: لتسهيل عمليات الدفع الإلكتروني.",
          "غرف التجارة: للترويج للمنصة وتشجيع المنتجين المحليين على الانضمام.",
          "منظمات غير حكومية: لدعم المشاريع الصغيرة والمتوسطة.",
        ],
      },
      {
        title: "11. التحديات والحلول",
        content: [
          "التحديات:",
          "• صعوبة الوصول إلى الإنترنت في بعض المناطق.",
          "• تحديات الشحن الدولي بسبب العقوبات.",
          "• انعدام الثقة في التجارة الإلكترونية.",
          "",
          "الحلول:",
          "• توفير تطبيق يعمل بشكل جيد حتى مع اتصال إنترنت ضعيف.",
          "• البحث عن شركات شحن دولية تعمل في سوريا.",
          "• بناء نظام تقييم ومراجعات لتعزيز الثقة بين الأطراف.",
        ],
      },
      {
        title: "12. الخطة الزمنية",
        content: [
          "المرحلة الأولى (3 أشهر): تطوير المنصة واختبارها مع مجموعة صغيرة من البائعين والمشترين.",
          "المرحلة الثانية (6 أشهر): إطلاق المنصة رسميًا وبدء الحملات التسويقية.",
          "المرحلة الثالثة (12 شهرًا): التوسع ليشمل كل المدن السورية والأسواق الدولية.",
        ],
      },
      {
        title: "13. المؤشرات الرئيسية للأداء (KPIs)",
        content: [
          "• عدد البائعين المسجلين.",
          "• عدد الطلبات الشهرية.",
          "• حجم المعاملات المالية على المنصة.",
          "• مستوى رضا العملاء (بناءً على التقييمات والمراجعات).",
          "• عدد الزوار اليوميين/الشهريين.",
        ],
      },
      {
        title: "14. التمويل",
        content: [
          "مصادر التمويل:",
          "• استثمارات من رجال أعمال سوريين.",
          "• التمويل الجماعي من الأفراد السوريين.",
          "",
          "ميزانية أولية لأول 12 شهرا:",
          "• تطوير المنصة: $10,000",
          "• التسويق: $30,000",
          "• التشغيل (رواتب وبنية تحتية): $10,000",
        ],
      },
      {
        title: "15. الخاتمة",
        content:
          "إنشاء منصة سايكس الإلكترونية مثل \"علي بابا\" في سوريا يمكن أن يكون خطوة مهمة نحو تعزيز الاقتصاد المحلي وفتح فرص جديدة للمنتجين والتجار. مع التخطيط الجيد والتنفيذ الفعال، يمكن لهذه المنصة أن تصبح مركزًا رئيسيًا للتجارة الإلكترونية في المنطقة.\n\nنموذج العمل هذا قابل للتعديل بناءً على الاحتياجات المتغيرة والفرص الجديدة التي قد تظهر أثناء التنفيذ.",
      },
    ],
    team: [
      {
        name: "أنس هبره",
        role: "مدير المشروع",
        photo: "/images/team/ans-habra.png", // Ensure this path is correct
      },
      {
        name: "محمود الأحمد",
        role: "المدير التقني للمشروع مع خبرة سلاسل توريد",
        photo: "/images/team/mahmoud-ahmad.png",
      },
      {
        name: "محمد بيلوني",
        role: "مدير التسويق",
        photo: "/images/team/mohamed-beloni.png",
      },
    ],
  },
  // ... Add other projects as needed
];


--- C:\Users\hanos\sytech\app\data\projectsData.ts ---
// app/data/projectsData.ts

import { Project } from "@/app/types";

export const projects: Project[] = [
  {
    id: "saiks", // Changed from "project-1" to "saiks" to match projectDetailsData.ts
    name: "سايكس",
    logo: "/images/projects/syex-logo.png", // Updated path to match projectDetailsData.ts
    shortDescription: "منصة إلكترونية تربط المنتجين السوريين بالمشترين الدوليين.",
  },
  // ... Add other projects as needed
];


--- C:\Users\hanos\sytech\app\projects\[id]\page.tsx ---
// app/projects/[id]/page.tsx

"use client"; // Enable client-side interactivity for GSAP animations

import React, { useEffect, useRef } from "react";
import { Metadata } from "next";
import { projectDetails, ProjectDetail } from "@/app/data/projectDetailsData";
import Image from "next/image";
import ProjectHeader from "@/components/ProjectHeader";
import styles from "@/styles/ProjectDetail.module.scss";
import TeamMemberCard from "@/components/TeamMemberCard";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import Head from "next/head";

gsap.registerPlugin(ScrollTrigger);

interface PageProps {
  params: { id: string };
}

export const generateMetadata = ({ params }: PageProps): Metadata => {
  const project = projectDetails.find((proj) => proj.id === params.id);

  if (!project) {
    return {
      title: "المشروع غير موجود",
      description: "المشروع المطلوب غير متاح.",
      openGraph: {
        title: "المشروع غير موجود",
        description: "المشروع المطلوب غير متاح.",
      },
    };
  }

  return {
    title: `${project.name} - سيرياتك`,
    description: project.shortDescription,
    openGraph: {
      title: `${project.name} - سيرياتك`,
      description: project.shortDescription,
      url: `https://syriatech.co/projects/${project.id}`,
      images: [
        {
          url: project.logo.startsWith("http")
            ? project.logo
            : `https://syriatech.co${project.logo}`,
          width: 800,
          height: 600,
          alt: `${project.name} Logo`,
        },
      ],
      type: "website",
    },
  };
};

const ProjectDetailPage = ({ params }: PageProps) => {
  const { id } = params;

  // Reference for GSAP animations
  const projectDetailRef = useRef<HTMLDivElement | null>(null);

  // Find the project based on the ID
  const project: ProjectDetail | undefined = projectDetails.find(
    (proj) => proj.id === id
  );

  useEffect(() => {
    if (projectDetailRef.current) {
      gsap.from(projectDetailRef.current.querySelectorAll("h1, h2, p, ul"), {
        opacity: 0,
        y: 50,
        stagger: 0.2,
        duration: 1,
        ease: "power2.out",
        scrollTrigger: {
          trigger: projectDetailRef.current,
          start: "top 80%",
        },
      });
    }
  }, [project]);

  if (!project) {
    return (
      <>
        <ProjectHeader />
        <div className={styles.projectNotFound}>
          <h1>المشروع غير موجود</h1>
          <p>المشروع المطلوب غير متاح.</p>
        </div>
      </>
    );
  }

  return (
    <>
      {/* Structured Data for SEO */}
      <Head>
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify({
              "@context": "https://schema.org",
              "@type": "Project",
              name: project.name,
              description: project.shortDescription,
              url: `https://syriatech.co/projects/${project.id}`,
              logo: `https://syriatech.co${project.logo}`,
              // Add more structured data as needed
            }),
          }}
        />
      </Head>

      {/* Background Elements */}
      <div className="bg-shape">
        {/* Example Background Shapes */}
        <div className="bg-gradiant"></div>
        <div className="grain"></div>
        <div id="bg-snow">
          {/* Snowflakes are generated via SCSS */}
          {Array.from({ length: 50 }).map((_, index) => (
            <div key={index} className="snowflake"></div>
          ))}
        </div>
        <div id="bg-video">
          <video autoPlay muted loop>
            <source src="/videos/background-video.mp4" type="video/mp4" />
            Your browser does not support the video tag.
          </video>
        </div>
        <canvas id="background-canvas"></canvas>
      </div>

      {/* Main Content */}
      <ProjectHeader />
      <div className={styles.projectDetailContainer} ref={projectDetailRef}>
        <div className={styles.projectDetail}>
          <h1 className={styles.projectName}>{project.name}</h1>
          <div className={styles.logoAndDescription}>
            <Image
              src={project.logo}
              alt={`${project.name} Logo`}
              width={200}
              height={200}
              className={styles.projectLogo}
            />
            <p className={styles.projectDescription}>
              {project.fullDescription}
            </p>
          </div>

          {project.sections.map((section, index) => (
            <div key={index} className={styles.projectSection}>
              <h2 className={styles.sectionTitle}>{section.title}</h2>
              {Array.isArray(section.content) ? (
                <ul className={styles.sectionList}>
                  {section.content.map((item, idx) => (
                    <li key={idx}>{item}</li>
                  ))}
                </ul>
              ) : (
                <p className={styles.sectionContent}>{section.content}</p>
              )}
            </div>
          ))}

          {project.team && project.team.length > 0 && (
            <div className={styles.teamSection}>
              <h2 className={styles.sectionTitle}>فريق العمل</h2>
              <div className={styles.teamGrid}>
                {project.team.map((member, idx) => (
                  <TeamMemberCard key={idx} member={member} />
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default ProjectDetailPage;


--- C:\Users\hanos\sytech\components\AboutMe.tsx ---
// components/AboutMe.tsx

import Link from "next/link";
import React from "react";
import SectionTitle from "./SectionTitle";
import SectionOverlayText from "./SectionOverlayText";

const AboutMe = () => {
  return (
    <section id="about_me" className="about section">
      <SectionTitle subtitle="كلمتين نظاف أحسن من جريدة وسخة" title="تعرف علينا" />
      <div className="row mb-4 mb-lg-5 align-items-center">
        <div className="col-lg-7 col-xl-8 about-desc">
          <h2>أنا أنس هبره وهذه سيرياتك</h2>
          <p className="desc">
            سيرياتك شركة خاصة مساهمة بتدعم رواد الأعمال والشركات الناشئة لتطوير مشاريعهم وتحقيق النجاح. بتشتغل كمسرّعة أعمال، يعني بتجمع المستثمرين مع رواد الأعمال وبتقدم لهم استشارات استراتيجية، وبتوفر لهم الموارد اللازمة، وبتساعدهم يبنوا شبكة علاقات قوية. الهدف الأساسي هو تمكين الشباب السوري الطموح لتحويل أفكارهم إلى مشاريع ناجحة تساهم بنهضة الاقتصاد المحلي وتقلل من اعتماد السوق على الشركات الأجنبية، وتسد الفراغ الموجود بعدة قطاعات، في الجانب التقني.
          </p>
          <div className="row about-contact">
            <div className="col-sm-4 about-contact-item">
              <p>العنوان</p>
              <span>حماه، سوريا</span>
            </div>
            <div className="col-sm-4 about-contact-item">
              <p>رئيس مجلس الإدارة</p>
              <span>أنس هبره</span>
            </div>
          </div>
        </div>
        <div className="col-lg-5 col-xl-4">
          <div className="experience-card">
            <div className="card-inner"></div>
            <div>
              <div className="numbers">
                <span className="number-outline-one">10</span>
                <span className="number-outline-two">10</span>
                <span className="number-main">10</span>
              </div>
              <p>سنوات الخبرة</p>
            </div>
          </div>
        </div>
      </div>
      <div className="col-12">
        <Link href="#services" className="d-flex gap-4 align-items-center next-chapter">
          <span className="page">3/6</span>
          <span className="next">القسم التالي</span>
          <span className="icon">
            <i className="ph ph-arrow-elbow-right-down"></i>
          </span>
        </Link>
      </div>
    </section>
  );
};

export default AboutMe;


--- C:\Users\hanos\sytech\components\Attainments.tsx ---
// components/Attainments.tsx
"use client";
import React, { useState, ChangeEvent, FormEvent, useRef, useEffect } from "react";
import Link from "next/link";
import SectionTitle from "./SectionTitle";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

interface FormData {
  investorName: string;
  investorEmail: string;
  investorPhone: string;
  investmentAmount: string;
}

interface SubmitInvestorResponse {
  success: boolean;
  message?: string;
}

interface Status {
  loading: boolean;
  success: string | null;
  error: string | null;
}

const Attainments: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({
    investorName: "",
    investorEmail: "",
    investorPhone: "",
    investmentAmount: "",
  });

  const [status, setStatus] = useState<Status>({
    loading: false,
    success: null,
    error: null,
  });

  const formRef = useRef<HTMLFormElement>(null);

  useEffect(() => {
    const formGroups = gsap.utils.toArray<HTMLElement>(".attainments-form-group");
    gsap.fromTo(
      formGroups,
      { opacity: 0, y: 50 },
      {
        opacity: 1,
        y: 0,
        stagger: 0.15,
        duration: 0.8,
        ease: "power2.out",
        scrollTrigger: {
          trigger: ".attainments",
          start: "top 80%",
        },
      }
    );
    gsap.fromTo(
      ".submit-button",
      { opacity: 0, y: 30 },
      {
        opacity: 1,
        y: 0,
        duration: 1.0,
        ease: "power2.out",
        scrollTrigger: {
          trigger: ".attainments",
          start: "top 80%",
        },
      }
    );
  }, []);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setStatus({ loading: true, success: null, error: null });

    try {
      const response = await fetch("/api/submit-investor", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const contentType = response.headers.get("Content-Type") || "";
      if (!contentType.includes("application/json")) {
        const text = await response.text();
        console.error(`Invalid Content-Type: ${contentType}\nResponse body: ${text}`);
        throw new Error(`Invalid Content-Type: ${contentType}`);
      }

      const data: SubmitInvestorResponse = await response.json();
      console.log("API Response:", data);
      if (response.ok && data.success) {
        setStatus({ loading: false, success: "تم إرسال بياناتك بنجاح!", error: null });
        setFormData({ investorName: "", investorEmail: "", investorPhone: "", investmentAmount: "" });
        formRef.current?.reset();
      } else {
        setStatus({
          loading: false,
          success: null,
          error: data.message || "حدث خطأ غير متوقع.",
        });
      }
    } catch (err: any) {
      console.error("Fetch Error:", err);
      setStatus({
        loading: false,
        success: null,
        error: err.message || "حدث خطأ أثناء الإرسال. يرجى المحاولة لاحقًا.",
      });
    }
  };

  return (
    <section id="attainments" className="attainments section position-relative pb-5 mb-5" dir="rtl">
      <SectionTitle subtitle="بدك تصير مستثمر مساهم؟" title="عبيلنا النموذج" />
      <form ref={formRef} onSubmit={handleSubmit} className="contact-form needs-validation" noValidate>
        <div className="row g-4 g-xl-5">
          {/* Investor Name */}
          <div className="col-sm-6 attainments-form-group">
            <div className="form-floating">
              <input
                type="text"
                className={`form-control ${status.error && !formData.investorName ? "is-invalid" : ""}`}
                id="investorName"
                name="investorName"
                value={formData.investorName}
                onChange={handleChange}
                placeholder="الاسم الكامل"
                required
              />
              <label htmlFor="investorName">الاسم الكامل</label>
              {status.error && !formData.investorName && (
                <div className="invalid-feedback">الاسم الكامل مطلوب.</div>
              )}
            </div>
          </div>

          {/* Investor Email */}
          <div className="col-sm-6 attainments-form-group">
            <div className="form-floating">
              <input
                type="email"
                className={`form-control ${status.error && !formData.investorEmail ? "is-invalid" : ""}`}
                id="investorEmail"
                name="investorEmail"
                value={formData.investorEmail}
                onChange={handleChange}
                placeholder="البريد الإلكتروني"
                required
              />
              <label htmlFor="investorEmail">البريد الإلكتروني</label>
              {status.error && !formData.investorEmail && (
                <div className="invalid-feedback">البريد الإلكتروني مطلوب.</div>
              )}
            </div>
          </div>

          {/* Investor Phone */}
          <div className="col-sm-6 attainments-form-group">
            <div className="form-floating">
              <input
                type="tel"
                className={`form-control ${status.error && !formData.investorPhone ? "is-invalid" : ""}`}
                id="investorPhone"
                name="investorPhone"
                value={formData.investorPhone}
                onChange={handleChange}
                placeholder="رقم الجوال"
                required
              />
              <label htmlFor="investorPhone">رقم الجوال</label>
              {status.error && !formData.investorPhone && (
                <div className="invalid-feedback">رقم الجوال مطلوب.</div>
              )}
            </div>
          </div>

          {/* Investment Amount */}
          <div className="col-sm-6 attainments-form-group">
            <div className="form-floating">
              <input
                type="number"
                className={`form-control ${status.error && !formData.investmentAmount ? "is-invalid" : ""}`}
                id="investmentAmount"
                name="investmentAmount"
                value={formData.investmentAmount}
                onChange={handleChange}
                placeholder="مبلغ الاستثمار المتوقع"
                required
                min="100"
              />
              <label htmlFor="investmentAmount">مبلغ الاستثمار المتوقع</label>
              {status.error && !formData.investmentAmount && (
                <div className="invalid-feedback">مبلغ الاستثمار مطلوب ويجب أن يكون 100 دولار على الأقل.</div>
              )}
            </div>
          </div>

          {/* Status Messages */}
          {status.loading && (
            <div className="col-12">
              <div className="alert alert-info" role="alert">
                جارٍ الإرسال...
              </div>
            </div>
          )}
          {status.success && (
            <div className="col-12">
              <div className="alert alert-success" role="alert">
                {status.success}
              </div>
            </div>
          )}
          {status.error && (
            <div className="col-12">
              <div className="alert alert-danger" role="alert">
                {status.error}
              </div>
            </div>
          )}

          {/* Submit Button */}
          <div className="col-12">
            <button
              type="submit"
              disabled={status.loading}
              className="btn btn-success w-100 submit-button"
            >
              {status.loading ? "جارٍ الإرسال..." : "إرسال"}
            </button>
          </div>
        </div>
      </form>
      <div className="col-12 mt-4">
        <Link href="#next-section" className="d-flex gap-4 align-items-center next-chapter">
          <span className="page">5/6</span>
          <span className="next">القسم التالي</span>
          <span className="icon">
            <i className="ph ph-arrow-elbow-right-down"></i>
          </span>
        </Link>
      </div>
    </section>
  );
};

export default Attainments;


--- C:\Users\hanos\sytech\components\Bootstrap.tsx ---
// components/Bootstrap.tsx
"use client";
import React, { useEffect } from "react";

const Bootstrap = ({ children }: { children: React.ReactNode }) => {
  useEffect(() => {
    import("bootstrap");
  }, []);
  return <>{children}</>;
};

export default Bootstrap;


--- C:\Users\hanos\sytech\components\Experience.tsx ---
// components/Experience.tsx
"use client";
import React, { useState, ChangeEvent, FormEvent, useRef, useEffect } from "react";
import Link from "next/link";
import SectionTitle from "./SectionTitle";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

interface FormDataState {
  fullName: string;
  email: string;
  phone: string;
  linkedin: string;
  website: string;
  pitchDeck: File | null;
}

interface SubmitProjectResponse {
  success: boolean;
  message?: string;
}

interface Status {
  loading: boolean;
  success: string | null;
  error: string | null;
}

const Experience: React.FC = () => {
  const [formData, setFormData] = useState<FormDataState>({
    fullName: "",
    email: "",
    phone: "",
    linkedin: "",
    website: "",
    pitchDeck: null,
  });

  const [status, setStatus] = useState<Status>({
    loading: false,
    success: null,
    error: null,
  });

  const formRef = useRef<HTMLFormElement>(null);

  useEffect(() => {
    const formGroups = gsap.utils.toArray<HTMLElement>(".experience-form-group");
    gsap.fromTo(
      formGroups,
      { opacity: 0, y: 50 },
      {
        opacity: 1,
        y: 0,
        stagger: 0.15,
        duration: 0.8,
        ease: "power2.out",
        scrollTrigger: {
          trigger: ".experience",
          start: "top 80%",
        },
      }
    );
    gsap.fromTo(
      ".submit-button",
      { opacity: 0, y: 30 },
      {
        opacity: 1,
        y: 0,
        duration: 1.0,
        ease: "power2.out",
        scrollTrigger: {
          trigger: ".experience",
          start: "top 80%",
        },
      }
    );
  }, []);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, type, files, value } = e.target;
    if (type === "file" && files?.length) {
      setFormData((prev) => ({ ...prev, [name]: files[0] }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setStatus({ loading: true, success: null, error: null });

    try {
      const data = new FormData();
      data.append("fullName", formData.fullName);
      data.append("email", formData.email);
      data.append("phone", formData.phone);
      data.append("linkedin", formData.linkedin);
      data.append("website", formData.website);
      if (formData.pitchDeck) {
        data.append("pitchDeck", formData.pitchDeck);
      }

      const response = await fetch("/api/submit-project", {
        method: "POST",
        body: data,
      });

      const contentType = response.headers.get("Content-Type") || "";
      if (!contentType.includes("application/json")) {
        const text = await response.text();
        console.error(`Invalid Content-Type: ${contentType}\nResponse body: ${text}`);
        throw new Error(`Invalid Content-Type: ${contentType}`);
      }

      const resData: SubmitProjectResponse = await response.json();
      if (response.ok && resData.success) {
        setStatus({ loading: false, success: "تم إرسال النموذج بنجاح!", error: null });
        setFormData({
          fullName: "",
          email: "",
          phone: "",
          linkedin: "",
          website: "",
          pitchDeck: null,
        });
        formRef.current?.reset();
      } else {
        setStatus({
          loading: false,
          success: null,
          error: resData.message || "حدث خطأ غير متوقع.",
        });
      }
    } catch (err: any) {
      console.error("Fetch Error:", err);
      setStatus({
        loading: false,
        success: null,
        error: err.message || "حدث خطأ أثناء الإرسال. يرجى المحاولة لاحقًا.",
      });
    }
  };

  return (
    <section id="experience" className="experience section position-relative pb-5 mb-5" dir="rtl">
      <SectionTitle subtitle="إذا كنت رائد أعمال سوري، حياك الله" title="ابعتلنا مشروعك لندرسه" />
      <form
        ref={formRef}
        onSubmit={handleSubmit}
        encType="multipart/form-data"
        className="contact-form needs-validation"
        noValidate
      >
        <div className="row g-4 g-xl-5">
          {/* Full Name */}
          <div className="col-sm-6 experience-form-group">
            <div className="form-floating">
              <input
                type="text"
                className={`form-control ${status.error && !formData.fullName ? "is-invalid" : ""}`}
                id="fullName"
                name="fullName"
                value={formData.fullName}
                onChange={handleChange}
                placeholder="الاسم الكامل"
                required
              />
              <label htmlFor="fullName">الاسم الكامل</label>
              {status.error && !formData.fullName && (
                <div className="invalid-feedback">الاسم الكامل مطلوب.</div>
              )}
            </div>
          </div>

          {/* Email */}
          <div className="col-sm-6 experience-form-group">
            <div className="form-floating">
              <input
                type="email"
                className={`form-control ${status.error && !formData.email ? "is-invalid" : ""}`}
                id="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                placeholder="البريد الإلكتروني"
                required
              />
              <label htmlFor="email">البريد الإلكتروني</label>
              {status.error && !formData.email && (
                <div className="invalid-feedback">البريد الإلكتروني مطلوب.</div>
              )}
            </div>
          </div>

          {/* Phone */}
          <div className="col-sm-6 experience-form-group">
            <div className="form-floating">
              <input
                type="tel"
                className={`form-control ${status.error && !formData.phone ? "is-invalid" : ""}`}
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleChange}
                placeholder="رقم الجوال"
                required
              />
              <label htmlFor="phone">رقم الجوال</label>
              {status.error && !formData.phone && (
                <div className="invalid-feedback">رقم الجوال مطلوب.</div>
              )}
            </div>
          </div>

          {/* LinkedIn */}
          <div className="col-sm-6 experience-form-group">
            <div className="form-floating">
              <input
                type="url"
                className={`form-control ${status.error && !formData.linkedin ? "is-invalid" : ""}`}
                id="linkedin"
                name="linkedin"
                value={formData.linkedin}
                onChange={handleChange}
                placeholder="لينكدإن"
                required
              />
              <label htmlFor="linkedin">لينكدإن</label>
              {status.error && !formData.linkedin && (
                <div className="invalid-feedback">لينكدإن مطلوب.</div>
              )}
            </div>
          </div>

          {/* Website */}
          <div className="col-sm-6 experience-form-group">
            <div className="form-floating">
              <input
                type="url"
                className={`form-control ${status.error && !formData.website ? "is-invalid" : ""}`}
                id="website"
                name="website"
                value={formData.website}
                onChange={handleChange}
                placeholder="الموقع الإلكتروني"
                required
              />
              <label htmlFor="website">الموقع الإلكتروني</label>
              {status.error && !formData.website && (
                <div className="invalid-feedback">الموقع الإلكتروني مطلوب.</div>
              )}
            </div>
          </div>

          {/* Pitch Deck */}
          <div className="col-sm-6 experience-form-group">
            <label htmlFor="pitchDeck" className="form-label">
              تحميل عرض المشروع (PDF)
            </label>
            <input
              type="file"
              className={`form-control ${status.error && !formData.pitchDeck ? "is-invalid" : ""}`}
              id="pitchDeck"
              name="pitchDeck"
              accept="application/pdf"
              onChange={handleChange}
              required
            />
            {status.error && !formData.pitchDeck && (
              <div className="invalid-feedback">تحميل عرض المشروع مطلوب.</div>
            )}
          </div>

          {/* Status Messages */}
          {status.loading && (
            <div className="col-12">
              <div className="alert alert-info" role="alert">
                جارٍ الإرسال...
              </div>
            </div>
          )}
          {status.success && (
            <div className="col-12">
              <div className="alert alert-success" role="alert">
                {status.success}
              </div>
            </div>
          )}
          {status.error && (
            <div className="col-12">
              <div className="alert alert-danger" role="alert">
                {status.error}
              </div>
            </div>
          )}

          {/* Submit Button */}
          <div className="col-12">
            <button
              type="submit"
              disabled={status.loading}
              className="btn btn-success w-100 submit-button"
            >
              {status.loading ? "جارٍ الإرسال..." : "إرسال"}
            </button>
          </div>
        </div>
      </form>
    </section>
  );
};

export default Experience;


--- C:\Users\hanos\sytech\components\GSAPAnimations.tsx ---
// components/GSAPAnimations.tsx

"use client";

import { useEffect } from "react";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

const GSAPAnimations = () => {
  useEffect(() => {
    gsap.registerPlugin(ScrollTrigger);

    // Example GSAP animation targeting elements with the class 'animate-me'
    const animation = gsap.from(".animate-me", {
      scrollTrigger: {
        trigger: ".animate-me",
        start: "top 80%",
      },
      y: 100,
      opacity: 0,
      duration: 1,
      ease: "power2.out",
    });

    // Cleanup function to kill only this specific ScrollTrigger
    return () => {
      if (animation.scrollTrigger) {
        animation.scrollTrigger.kill();
      }
    };
  }, []);

  return null; // This component doesn't render anything
};

export default GSAPAnimations;


--- C:\Users\hanos\sytech\components\Header.tsx ---
// components/Header.tsx

"use client";

import React, { Dispatch, SetStateAction } from "react";
import Logo from "@/public/images/logo.png";
import Image from "next/image";
import Link from "next/link";

const Header = ({
  setNavOpen,
  navOpen,
  classes,
}: {
  setNavOpen: Dispatch<SetStateAction<boolean>>;
  navOpen: boolean;
  classes?: string;
}) => {
  return (
    <header className="header">
      <div className="container-fluid d-flex align-items-center justify-content-between">
        <Link href="/" className={classes}>
          <Image src={Logo} alt="logo" />
        </Link>

        <button
          onClick={() => setNavOpen((p) => !p)}
          className="bg-transparent border-0 d-xl-none"
        >
          <div className={`nav-icon ${navOpen ? "open" : ""}`}>
            <span></span>
            <span></span>
            <span></span>
          </div>
        </button>
      </div>
    </header>
  );
};

export default Header;


--- C:\Users\hanos\sytech\components\Hero.tsx ---
// components/Hero.tsx

import Image from "next/image";
import React from "react";
import HeroImg from "@/public/images/hero.png";
import Typewriter from "typewriter-effect";
import Link from "next/link";
import { useGSAP } from "@gsap/react";
import SplitType from "split-type";
import gsap from "gsap";

const Hero = ({ classes }: { classes?: string }) => {
  useGSAP(() => {
    gsap.from(".img-wrapper", {
      duration: 1.5,
      scale: 1.5,
      ease: "back",
      delay: 0.3,
      opacity: 0,
    });
    gsap.from(".work-btn", {
      duration: 1.2,
      scale: 0,
      opacity: 0,
      ease: "bounce",
    });
    gsap.from(".contact-btn", {
      duration: 1.2,
      scale: 0,
      opacity: 0,
      ease: "bounce",
    });

    const freelancer = SplitType.create(".freelancer", { types: "words" }).words;
    const desc = SplitType.create(".description", { types: "words" }).words;
    gsap.from(freelancer, {
      duration: 1.5,
      opacity: 0,
      ease: "bounce",
      stagger: 0.2,
    });
    gsap.from(desc, {
      duration: 1,
      opacity: 0,
      stagger: 0.2,
    });
  });

  return (
    <section id="top" className={`hero ${classes}`}>
      <div className="row gx-4 justify-content-center align-items-center">
        <div className="col-12 col-md-6 col-xl-6 hero-content">
          <div>
            <h4 className="text-uppercase freelancer">سيرياتك</h4>
            <Typewriter
              component={"h1"}
              options={{
                strings: ["رائد أعمال طموح", "مستثمر ذكي", "مشروع ناجح"],
                autoStart: true,
                loop: true,
              }}
            />
            <p className="description">مسرعة أعمال سورية مساهمة خاصة</p>
          </div>
          <div className="d-flex gap-4">
            <Link href="#attainments" className="btn work-btn text-capitalize btn-secondary">
              سجل كمستثمر
            </Link>
            <Link href="#experience" className="btn contact-btn text-capitalize btn-outline-secondary">
              قدم مشروعك
            </Link>
          </div>
        </div>
        <div className="col-12 col-md-5 offset-md-1 offset-xxl-2 col-xl-4 d-flex justify-content-center">
          <div className="img-wrapper">
            <div className="waves-top">
              <span></span>
              <span></span>
              <span></span>
              <span></span>
            </div>
            <Image
              className="img-fluid rounded-circle hero-img"
              priority={true}
              src={HeroImg}
              alt=""
            />
            <div className="waves-bottom">
              <span></span>
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
        </div>
        <div className="col-12">
          <Link href="#about_me" className="d-flex gap-4 align-items-center next-chapter mt-5">
            <span className="page">2/6</span>
            <span className="next">القسم التالي</span>
            <span className="icon">
              <i className="ph ph-arrow-elbow-right-down"></i>
            </span>
          </Link>
        </div>
      </div>
    </section>
  );
};

export default Hero;


--- C:\Users\hanos\sytech\components\HomeContent.tsx ---
// components/HomeContent.tsx

"use client";

import { useEffect, useState } from "react";
import Head from "next/head";
import Header from "@/components/Header";
import Navigation from "@/components/Navigation";
import Hero from "@/components/Hero";
import AboutMe from "@/components/AboutMe";
import Services from "@/components/Services";
import Attainments from "@/components/Attainments";
import Experience from "@/components/Experience";
import Projects from "@/components/Projects"; // Import the Projects component
import { projects } from "@/app/data/projectsData"; // Import project data

type HomeContentProps = {
  structuredData: object;
};

export default function HomeContent({ structuredData }: HomeContentProps) {
  const [navOpen, setNavOpen] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate loading delay if necessary
    setLoading(false);
  }, []);

  if (loading) {
    return (
      <div className="loader-container w-100 d-flex align-items-center justify-content-center">
        <div className="loader"></div>
      </div>
    );
  }

  return (
    <>
      <Head>
        {/* Canonical URL */}
        <link rel="canonical" href="https://syriatech.co" />
        {/* Structured Data */}
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{ __html: JSON.stringify(structuredData) }}
        />
      </Head>
      <Header navOpen={navOpen} setNavOpen={setNavOpen} />
      <Navigation setNavOpen={setNavOpen} navOpen={navOpen} />
      <svg
        className="bg-gradiant"
        preserveAspectRatio="xMidYMid slice"
        viewBox="10 10 80 80"
      >
        <path
          fill="#9b5de5"
          className="out-top"
          d="M37-5C25.1-14.7,5.7-19.1-9.2-10-28.5,1.8-32.7,31.1-19.8,49c15.5,21.5,52.6,22,67.2,2.3C59.4,35,53.7,8.5,37-5Z"
        />
        <path
          fill="#f15bb5"
          className="in-top"
          d="M20.6,4.1C11.6,1.5-1.9,2.5-8,11.2-16.3,23.1-8.2,45.6,7.4,50S42.1,38.9,41,24.5C40.2,14.1,29.4,6.6,20.6,4.1Z"
        />
        <path
          fill="#00bbf9"
          className="out-bottom"
          d="M105.9,48.6c-12.4-8.2-29.3-4.8-39.4.8-23.4,12.8-37.7,51.9-19.1,74.1s63.9,15.3,76-5.6c7.6-13.3,1.8-31.1-2.3-43.8C117.6,63.3,114.7,54.3,105.9,48.6Z"
        />
        <path
          fill="#00f5d4"
          className="in-bottom"
          d="M102,67.1c-9.6-6.1-22-3.1-29.5,2-15.4,10.7-19.6,37.5-7.6,47.8s35.9,3.9,44.5-12.5C115.5,92.6,113.9,74.6,102,67.1Z"
        />
      </svg>
      <main className="container-fluid">
        <div className="row gx-xxl-6">
          <div
            className="col col-xl-9"
            data-bs-spy="scroll"
            data-bs-target="#navigation"
          >
            <Hero />
            <AboutMe />
            <Services />
            <Attainments />
            <Experience />
            {/* New Our Projects Section */}
            <Projects projects={projects} />
          </div>
        </div>
      </main>
    </>
  );
}


--- C:\Users\hanos\sytech\components\Navigation.tsx ---
// components/Navigation.tsx

import Image from "next/image";
import React, { Dispatch, SetStateAction, useEffect, useRef } from "react";
import Logo from "@/public/images/logo.png";
import Link from "next/link";
import shuffleLetters from "shuffle-letters";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";

const Navigation = ({
  setNavOpen,
  navOpen,
}: {
  setNavOpen: Dispatch<SetStateAction<boolean>>;
  navOpen: boolean;
}) => {
  const navRef = useRef<HTMLElement>(null);

  useEffect(() => {
    const handleClassChange = (
      mutationsList: MutationRecord[],
      observer: MutationObserver
    ) => {
      mutationsList.forEach((mutation) => {
        if (
          mutation.type === "attributes" &&
          mutation.attributeName === "class"
        ) {
          const target = mutation.target as HTMLElement;
          if (target.classList.contains("active")) {
            const textElement = target.querySelector(".text");
            if (textElement) {
              shuffleLetters(textElement, { iterations: 5 });
            }
          }
        }
      });
    };

    const observer = new MutationObserver(handleClassChange);
    const config = {
      attributes: true,
      subtree: true,
      attributeFilter: ["class"],
    };

    if (navRef.current) {
      observer.observe(navRef.current, config);
    }

    return () => {
      observer.disconnect();
    };
  }, []);

  useGSAP(() => {
    gsap.to(".navigation", {
      "--height": "100%",
      duration: 1,
      ease: "power1.inOut",
    });
    gsap.from(".nav-link", {
      duration: 0.8,
      delay: 0.5,
      opacity: 0,
      stagger: 0.1,
    });
  });

  return (
    <>
      <nav
        ref={navRef}
        className={`navigation ${navOpen ? "opened" : ""}`}
        id="navigation"
      >
        <Image src={Logo} className="mb-4 d-xl-none" alt="logo" />
        <ul>
          <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#top" className="active">
              <span>01</span> <span className="text">المقدمة</span>{" "}
            </Link>
          </li>
          <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#about_me">
              <span>02</span> <span className="text">من نحن</span>{" "}
            </Link>
          </li>
          <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#services">
              <span>03</span> <span className="text">شو بنعمل</span>{" "}
            </Link>
          </li>
          <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#attainments">
              <span>04</span> <span className="text">المستثمر</span>{" "}
            </Link>
          </li>
          <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#experience">
              <span>05</span> <span className="text">رائد الأعمال</span>{" "}
            </Link>
          </li>
          {/* New Projects Link */}
          <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#our-projects">
              <span>06</span> <span className="text">مشاريعنا</span>
            </Link>
          </li>
          {/* Uncomment and adjust numbering as needed for additional links */}
          {/* <li onClick={() => setNavOpen(false)} className="nav-link">
            <Link href="#contact">
              <span>07</span> <span className="text">اتصل بنا</span>{" "}
            </Link>
          </li> */}
        </ul>
      </nav>
      <div onClick={() => setNavOpen(false)} className="nav-overlay d-xl-none"></div>
    </>
  );
};

export default Navigation;


--- C:\Users\hanos\sytech\components\ProjectHeader.tsx ---
// components/ProjectHeader.tsx

"use client";

import React, { useState } from "react";
import Header from "@/components/Header";

const ProjectHeader = () => {
  const [navOpen, setNavOpen] = useState(false);

  return <Header setNavOpen={setNavOpen} navOpen={navOpen} />;
};

export default ProjectHeader;


--- C:\Users\hanos\sytech\components\Projects.tsx ---
"use client";

import React, { useRef } from "react";
import Image from "next/image";
import Link from "next/link";
import { Project } from "@/app/types";
import styles from "@/styles/Projects.module.scss"; // Ensure this SCSS module exists
import SectionTitle from "./SectionTitle";
import useGSAP from "@/hooks/useGSAP";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

interface ProjectsProps {
  projects: Project[];
}

const Projects: React.FC<ProjectsProps> = ({ projects }) => {
  const sectionRef = useRef<HTMLElement | null>(null);

  useGSAP(
    (self) => {
      if (self.selector) {
        const projectCards = self.selector(`.${styles.projectCard}`);
        if (projectCards.length > 0) { // Ensure there are elements to animate
          gsap.from(projectCards, {
            stagger: 0.2,
            opacity: 0,
            y: 50,
            duration: 1,
            ease: "power2.out",
            scrollTrigger: {
              trigger: sectionRef.current!,
              start: "top 80%",
              end: "top 60%",
              toggleActions: "play none none reverse",
            },
          });
        }
      }
    },
    sectionRef
  );

  return (
    <section ref={sectionRef} id="our-projects" className={styles.projectsSection}>
      <SectionTitle subtitle="تعرف على مشاريعنا" title="مشاريعنا" />
      <div className={styles.projectsGrid}>
        {projects.map((project) => (
          <Link
            key={project.id}
            href={`/projects/${project.id}`}
            className={styles.projectLink}
          >
            <div className={styles.projectCard}>
              <div className={styles.projectImageWrapper}>
                <Image
                  src={project.logo}
                  alt={`${project.name} Logo`}
                  width={150}
                  height={150}
                  className={styles.projectLogo}
                />
              </div>
              <h3 className={styles.projectName}>{project.name}</h3>
              <p className={styles.projectDescription}>
                {project.shortDescription}
              </p>
            </div>
          </Link>
        ))}
      </div>
    </section>
  );
};

export default Projects;


--- C:\Users\hanos\sytech\components\SectionOverlayText.tsx ---
import React, { useEffect, useRef } from "react";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { useGSAP } from "@gsap/react";

gsap.registerPlugin(ScrollTrigger);

const SectionOverlayText = ({ text }: { text: string }) => {
  const sectionTitleRef = useRef(null);

  useGSAP(() => {
    const element = sectionTitleRef.current;

    const anim = gsap.fromTo(
      element,
      { y: "50%" },
      {
        y: "-50%",
        scrollTrigger: {
          trigger: ".about",
          start: "top bottom",
          end: "bottom top",
          scrub: true,
        },
      },
    );

    return () => {
      anim.kill();
      ScrollTrigger.getAll().forEach((trigger) => trigger.kill()); // Clean up all ScrollTriggers
    };
  });

  return (
    <span ref={sectionTitleRef} className="section-title-overlay-text">
      {text}
    </span>
  );
};

export default SectionOverlayText;


--- C:\Users\hanos\sytech\components\SectionTitle.tsx ---
import React, { useEffect, useRef } from "react";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { useGSAP } from "@gsap/react";

type Props = {
  subtitle: string;
  title: string;
};

gsap.registerPlugin(ScrollTrigger);

const SectionTitle = ({ title, subtitle }: Props) => {
  const sectionTitleRef = useRef(null);

  useGSAP(() => {
    const element = sectionTitleRef.current;

    const fromAnimation = gsap.from(element, {
      opacity: 0,
      y: 50,
      scrollTrigger: {
        trigger: element,
        start: "top bottom", // adjust as needed
      },
    });

    const toAnimation = gsap.to(element, {
      "--height": "100%",
      delay: 0.5,
      scrollTrigger: {
        trigger: element,
        start: "top bottom", // adjust as needed
      },
    });

    return () => {
      fromAnimation.kill();
      toAnimation.kill();
      ScrollTrigger.getAll().forEach((trigger) => trigger.kill()); // Clean up all ScrollTriggers
    };
  });

  return (
    <div ref={sectionTitleRef} className="section-title text-capitalize">
      <h4>{subtitle}</h4>
      <h2>{title}</h2>
    </div>
  );
};

export default SectionTitle;


--- C:\Users\hanos\sytech\components\Services.tsx ---
// components/Services.tsx

"use client";

import React, { useRef } from "react";
import { Autoplay, Pagination } from "swiper/modules";
import { Swiper, SwiperSlide } from "swiper/react";
import SectionTitle from "./SectionTitle";
import useGSAP from "@/hooks/useGSAP";
import gsap from "gsap";
import "swiper/css";
import "swiper/css/pagination";
import "swiper/css/autoplay";

interface Service {
  id: number;
  number: string;
  title: string;
  features: string[];
}

const servicesData: Service[] = [
  {
    id: 1,
    number: "01",
    title: "رائد الأعمال",
    features: [
      "عندك مشروع ناشيء",
      "عندك تيم لو من شخصين",
      "المشروع يعمل",
      "عم يحقق أرباح أو لا مش مشكلة",
      "قدم عرض تقديمي إلينا",
    ],
  },
  {
    id: 2,
    number: "02",
    title: "سيرياتك",
    features: [
      "بندرس عرضك التقديمي",
      "مستشارينا بيقيموا المشروع",
      "بنرسل مشروعك للمستثمرين",
      "بنجمع ردود المستثمرين",
      "يصلك إيميل قبول أو رفض",
    ],
  },
  {
    id: 3,
    number: "03",
    title: "المستثمر",
    features: [
      "بيسجل بياناته للتواصل",
      "بنرسل له المشاريع المقترحة",
      "بنرفق تقييمنا مع العرض التقديمي",
      "ننتظر الرد بالقبول أو الرفض",
      "ترتيب اجتماع مع رائد الأعمال",
    ],
  },
];

const Services: React.FC = () => {
  const sectionRef = useRef<HTMLElement | null>(null);

  useGSAP(
    (self) => {
      // Ensure that 'selector' exists before using it
      if (self.selector) {
        const serviceCards = self.selector(".service-card");
        
        gsap.from(serviceCards, {
          stagger: 0.2,
          opacity: 0,
          y: 50,
          duration: 1.5,
          ease: "power2.out",
          scrollTrigger: {
            trigger: sectionRef.current!,
            start: "top 60%",
            end: "top 20%",
            toggleActions: "play none none reverse",
          },
        });
      }
    },
    sectionRef
  );

  return (
    <section ref={sectionRef} id="services" className="services section position-relative">
      <SectionTitle subtitle="رح اشرحلك خطوات شغلنا" title="كيف بنشتغل" />

      <Swiper
        slidesPerView={"auto"}
        spaceBetween={24}
        loop={true}
        autoplay={{
          delay: 5000,
          disableOnInteraction: false,
        }}
        pagination={{ clickable: true }}
        modules={[Autoplay, Pagination]}
        breakpoints={{
          768: {
            slidesPerView: 2,
            spaceBetween: 24,
          },
          1550: {
            slidesPerView: 3,
            spaceBetween: 24,
          },
        }}
        dir="ltr"
        className="swiper service-swiper"
      >
        {servicesData.map((service) => (
          <SwiperSlide key={service.id} className="overflow-visible p-3">
            <div className="service-card">
              <div className="card-inner"></div>
              <div className="content">
                <div className="number-circle">
                  <div className="waves-top-sm">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                  <h2>{service.number}</h2>
                  <div className="waves-bottom-sm">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
                <h4>{service.title}</h4>
                <ul className="service-list">
                  {service.features.map((feature, index) => (
                    <li key={index}>
                      <i className="ph ph-caret-double-right"></i> {feature}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </SwiperSlide>
        ))}

        {/* Swiper Pagination */}
        <div className="swiper-pagination"></div>
      </Swiper>

      <div className="col-12">
        <a href="#attainments" className="d-flex gap-4 align-items-center next-chapter">
          <span className="page">4/6</span>
          <span className="next">القسم التالي</span>
          <span className="icon">
            <i className="ph ph-arrow-elbow-right-down"></i>
          </span>
        </a>
      </div>
    </section>
  );
};

export default Services;


--- C:\Users\hanos\sytech\components\TeamMemberCard.tsx ---
// components/TeamMemberCard.tsx

"use client"; // Mark as client component if it uses client-side features

import React from "react";
import Image from "next/image";
import styles from "@/styles/TeamMemberCard.module.scss"; // Ensure this SCSS module exists

interface TeamMember {
  name: string;
  role: string;
  photo?: string;
}

interface TeamMemberCardProps {
  member: TeamMember;
}

const TeamMemberCard: React.FC<TeamMemberCardProps> = ({ member }) => {
  return (
    <div className={styles.card}>
      {member.photo && (
        <Image
          src={member.photo}
          alt={`${member.name} Photo`}
          width={100}
          height={100}
          className={styles.photo}
        />
      )}
      <h3 className={styles.name}>{member.name}</h3>
      <p className={styles.role}>{member.role}</p>
    </div>
  );
};

export default TeamMemberCard;


--- C:\Users\hanos\sytech\hooks\useGSAP.ts ---
// hooks/useGSAP.ts

import { useEffect, RefObject } from "react";
import gsap, { Context } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

/**
 * Custom hook to integrate GSAP animations with React components.
 *
 * @param animationCallback - A callback function that receives the GSAP context's selector method.
 * @param scopeRef - A ref to the DOM element that defines the scope of the animation.
 */
const useGSAP = (
  animationCallback: (selector: gsap.utils.Selector) => void,
  scopeRef: RefObject<HTMLElement | null>
) => {
  useEffect(() => {
    if (typeof window === "undefined" || !scopeRef.current) {
      return;
    }

    // Initialize GSAP context
    const context: Context = gsap.context(() => {
      animationCallback((selector) => gsap.utils.selector(scopeRef.current!)(selector));
    }, scopeRef.current);

    // Cleanup function to revert animations on component unmount
    return () => {
      context.revert(); // Reverts all GSAP animations and ScrollTriggers within this context
      // Removed ScrollTrigger.killAll() to avoid killing unrelated ScrollTriggers
    };
  }, [animationCallback, scopeRef]); // Changed dependency from scopeRef.current to scopeRef
};

export default useGSAP;


--- C:\Users\hanos\sytech\styles\ProjectDetail.module.scss ---
/* styles/ProjectDetail.module.scss */

.projectDetailContainer {
  padding: 4rem 2rem; // Adds space from the header and sides
  background-color: #f9f9f9; // Light background for contrast
}

.projectDetail {
  max-width: 1200px;
  margin: 0 auto; // Center the content
  background: #ffffff;
  padding: 3rem 2rem;
  border-radius: 12px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
}

.projectName {
  font-size: 2.5rem;
  text-align: center;
  margin-bottom: 2rem;
  color: #333;
}

.logoAndDescription {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 3rem;

  @media (min-width: 768px) {
    flex-direction: row;
    align-items: flex-start;
    gap: 2rem;
  }
}

.projectLogo {
  border-radius: 12px;
  object-fit: contain;
  width: 200px;
  height: 200px;
  margin-bottom: 1.5rem;

  @media (min-width: 768px) {
    margin-bottom: 0;
  }
}

.projectDescription {
  font-size: 1.1rem;
  color: #555;
  line-height: 1.6;
  max-width: 800px;
}

.projectSection {
  margin-bottom: 2.5rem;
}

.sectionTitle {
  font-size: 1.8rem;
  color: #222;
  margin-bottom: 1rem;
  border-bottom: 2px solid #eee;
  padding-bottom: 0.5rem;
}

.sectionContent {
  font-size: 1rem;
  color: #555;
  line-height: 1.6;
  white-space: pre-wrap; // Preserves line breaks
}

.sectionList {
  list-style-type: disc;
  padding-left: 1.5rem;
  color: #555;

  li {
    margin-bottom: 0.5rem;
  }
}

.teamSection {
  margin-top: 3rem;
}

.teamGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 2rem;
  margin-top: 1.5rem;
}

.projectNotFound {
  padding: 4rem 2rem;
  text-align: center;
  color: #777;

  h1 {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  p {
    font-size: 1.2rem;
  }
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .projectDetailContainer {
    padding: 2rem 1rem;
  }

  .projectDetail {
    padding: 2rem 1rem;
  }

  .projectName {
    font-size: 2rem;
  }

  .sectionTitle {
    font-size: 1.5rem;
  }

  .projectDescription {
    font-size: 1rem;
  }
}


--- C:\Users\hanos\sytech\styles\Projects.module.scss ---
/* styles/Projects.module.scss */

.projectsSection {
  padding: 4rem 2rem;
  background-color: transparent; // Background already set to transparent
  position: relative;
}

.sectionTitle {
  text-align: center;
  font-size: 2.5rem;
  margin-bottom: 3rem;
  color: #333;
}

.projectsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 2rem;
}

.projectLink {
  text-decoration: none;
  color: inherit;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.projectCard {
  background: rgba(255, 255, 255, 0.8); // Semi-transparent background for better integration
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  padding: 2rem 1.5rem;
  text-align: center;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  cursor: pointer;
  position: relative;
  overflow: hidden;

  &:hover {
    transform: translateY(-10px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
  }

  &:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(155, 93, 229, 0.2), rgba(0, 187, 249, 0.2));
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  &:hover:after {
    opacity: 1;
  }
}

.projectImageWrapper {
  margin-bottom: 1.5rem;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 150px;
  width: 150px; // Ensures the wrapper is square
  margin-left: auto;
  margin-right: auto;
  background-color: transparent; // Set to transparent
}

.projectLogo {
  border-radius: 12px; // Rounded corners
  object-fit: contain; // Changed from cover to contain
  width: 100%;
  height: 100%;
  background-color: transparent; // Set to transparent
}

.projectName {
  font-size: 1.8rem;
  margin-bottom: 1rem;
  color: #222;
}

.projectDescription {
  font-size: 1rem;
  color: #555;
  min-height: 60px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .projectsGrid {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }

  .projectCard {
    padding: 1.5rem 1rem;
  }

  .projectName {
    font-size: 1.5rem;
  }

  .projectDescription {
    font-size: 0.9rem;
    min-height: 50px;
  }
}


--- C:\Users\hanos\sytech\styles\TeamMemberCard.module.scss ---
/* styles/TeamMemberCard.module.scss */

.card {
  background: rgba(255, 255, 255, 0.9);
  border-radius: 12px;
  padding: 1.5rem;
  text-align: center;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
  }
}

.photo {
  border-radius: 50%;
  object-fit: cover;
  margin-bottom: 1rem;
}

.name {
  font-size: 1.2rem;
  color: #222;
  margin-bottom: 0.5rem;
}

.role {
  font-size: 1rem;
  color: #555;
}


